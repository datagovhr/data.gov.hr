<?php
/**
 * @file
 * Code for the DGU Glossary feature.
 */

define('GLOSSARY_MODERATION_PERMISSION', 'moderate glossary');

include_once 'dgu_glossary.features.inc';

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_glossary_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'glossary/%':
      drupal_set_title(htmlspecialchars_decode($item['map'][1]->name));
      break;
    case 'glossary/%/suggest_definition':
    case 'glossary/%/thanks':
      $active_trail[2]['title'] = htmlspecialchars_decode($item['map'][1]->name);
      drupal_set_title('Suggest better definition');
      break;
  }
}

function dgu_glossary_menu() {
  // Get all the id's of vocabularies that are configured in the settings.
  $vids = variable_get('lexicon_vids', array());
  $items = array();
  // Create a menu item for terms in each vocabulary
  foreach ($vids as $vid) {
    // Don't create menu items for vocabularies that are not Lexicon
    // vocabularies.
    if ($vid != 0) {
      $lex_path = variable_get('lexicon_path_' . $vid, 'lexicon/' . $vid);
      $term_path = $lex_path . '/%taxonomy_term';
      $items[$term_path . '/suggest_definition'] = array(
        'title' => 'Suggest a better definition',
        'page callback' => 'dgu_glossary_suggest_definition_page',
        'page arguments' => array(1),
        'access arguments' => array('suggest new definitions'),
      );
      $items[$term_path . '/make_comment'] = array(
        'title' => 'Suggest a better definition',
        'page callback' => 'dgu_glossary_suggest_definition_page',
        'page arguments' => array(1),
        'access arguments' => array('create content'),
      );
      $items[$term_path . '/thanks'] = array(
        'title' => 'Thank you for your suggestion',
        'page callback' => 'dgu_glossary_suggest_definition_thanks_page',
        'page arguments' => array(1),
        'access arguments' => array('suggest new definitions'),
      );
      $items[$term_path] = array(
        'title' => 'Term',
        'page callback' => 'glossary_term_page',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
      );
    }
    $items[$lex_path . '/suggest_new'] = array(
      'title' => 'Suggest a new term and definition',
      'page callback' => 'dgu_glossary_suggest_new_page',
      'access arguments' => array('suggest new terms'),
    );
    $items[$lex_path . '/thanks'] = array(
      'title' => 'Thank you for your suggestion',
      'page callback' => 'dgu_glossary_new_definition_thanks_page',
      'access arguments' => array('suggest new terms'),
    );

  }

  return $items;
}


/**
 * Implements hook_ctools_plugin_dierctory().
 *
 * To let the system know we implement widget plugins.
 */
function dgu_glossary_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

function dgu_glossary_theme($existing, $type, $theme, $path) {
  return array(
    'suggested_definition_list' => array(
      'path' => drupal_get_path('module', 'dgu_glossary') . '/templates',
      'template' => 'glossary_suggested_list',
      'variables' => array(
        'nids' => NULL,
      ),
    ),
    'suggested_definition_item' => array(
      'path' => drupal_get_path('module', 'dgu_glossary') . '/templates',
      'template' => 'glossary_suggested_item',
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'suggested_definition_thanks' => array(
      'path' => drupal_get_path('module', 'dgu_glossary') . '/templates',
      'template' => 'glossary_thanks_page',
      'variables' => array(
        'thanks_text' => null,
        'links' => null,
      )
    ),
    'glossary_item_actions' => array(
      'path' => drupal_get_path('module', 'dgu_glossary') . '/templates',
      'template' => 'glossary_item_actions',
      'variables' => array(
      )
    ),
  );
}

function dgu_glossary_suggest_definition_thanks_page($term) {
  $thanks_text = t("Thank you for your suggestion.  We will normally respond to your suggestion within 5 working days.");
  $vid = $term->vid;
  $tid = $term->tid;
  $lex_path = variable_get('lexicon_path_' . $vid, 'lexicon/' . $vid);
  $links = "Return to the " . l(t("Glossary"), "$lex_path") . " or to the term: " . l($term->name, "$lex_path/$tid");
  return theme("suggested_definition_thanks", array('thanks_text' => $thanks_text, 'links' => $links));
}

function dgu_glossary_new_definition_thanks_page() {
  $thanks_text = t("Thank you for your suggestion.  We will normally respond to your suggestion within 5 working days.");
  $lex_path = 'glossary';
  $links = t('Return to the ') . l(t("Glossary"), "$lex_path");
  return theme("suggested_definition_thanks", array('thanks_text' => $thanks_text, 'links' => $links));
}

function dgu_glossary_suggest_definition_page($term) {
  global $user;
  $node = (object)array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'suggested_definition',
    'language' => LANGUAGE_NONE,
  );
  drupal_set_title(t('Suggest a better definition for @term.', array('@term' => $term->name)), PASS_THROUGH);
  drupal_set_message(t('You are creating new content, this may be placed in moderation and may not be immediately visible on the site.'));
  $form_state['build_info']['args'] = array($node);
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  $form = drupal_get_form('suggested_definition_node_form', $node);

  $form['current_def']['#markup'] = "<label>Current definition</label><p>{$term->description}</p>";
  $form['title']['#value'] = t('New suggested definition for "@term" made by @user',
    array('@term' => $term->name, '@user' => $user->name));
  $form['field_term'][LANGUAGE_NONE]['#default_value'] = array($term->tid);
  $form['field_term'][LANGUAGE_NONE]['#value'] = array($term->tid);

  return $form;
}

function dgu_glossary_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'suggested_definition_node_form' && arg(2) == 'suggest_definition') {
    $term = taxonomy_term_load(arg(1));
    $form['field_term']['#type'] = 'hidden';
    $form['field_term'][LANGUAGE_NONE]['#default_value'] = array($term->tid);
    $form['field_term'][LANGUAGE_NONE]['#value'] = array($term->tid);
    $form['title']['#type'] = 'hidden';

    unset($form['actions']['preview']);
    $form['field_reason_for_change'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => $form['field_reason_for_change'][LANGUAGE_NONE][0]['#description']);
    unset($form['field_reason_for_change'][LANGUAGE_NONE][0]['value']['#description']);
    $form['#attributes']['class'][] = "boxed";

    if (!user_access(GLOSSARY_MODERATION_PERMISSION)) {
      dgu_moderation_node_forms_alter($form);
    }
    else {
      $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';
    }

  }
  elseif ($form_id == 'suggested_term_node_form') {
    $form['title']['#type'] = 'hidden';
    unset($form['actions']['preview']);
    $form['field_reason_for_change'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => $form['field_reason_for_change'][LANGUAGE_NONE][0]['#description']);
    unset($form['field_reason_for_change'][LANGUAGE_NONE][0]['value']['#description']);
    $form['#attributes']['class'][] = "boxed";
    $form['#submit'][] = 'dgu_suggested_term_node_form_submit';

    if (!user_access(GLOSSARY_MODERATION_PERMISSION)) {
      dgu_moderation_node_forms_alter($form);
    }
    else {
      $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';
    }
  }
  elseif ($form_id == 'reply_add_form') {
    $form['#submit'][] = 'dgu_glossary_reply_submit';
  }
}

function dgu_glossary_reply_submit($form, &$form_state) {
  // Redirect to glossary page instead of taxonomy page.
  if (substr($form_state['redirect'], 0, 14) == 'taxonomy/term/') {
    $form_state['redirect'] = str_replace('taxonomy/term', 'glossary', $form_state['redirect']);
  }
  elseif (substr($form_state['redirect'], 0, 5) == 'node/') {
    $nid = substr($form_state['redirect'], 5);
    $node = node_load($nid);
    if($node->type == 'suggested_definition') {
      $tid = $node->field_term[LANGUAGE_NONE][0]['tid'];
      $form_state['redirect'] = 'glossary/' . $tid;
    }
  }
}
/**
 * Implements hook permissions
 */
function dgu_glossary_permission() {
  return array(
    'moderate glossary' => array(
      'title' => t('moderate glossary'),
    ),
    'suggest new definitions' => array(
      'title' => t('suggest new definitions'),
    ),
    'suggest new terms' => array(
      'title' => t('suggest new terms'),
    ),
  );
}


/**
 * Implements hook_theme_registry_alter to allow the theme files for the glossary to reside in
 * the templates directory of the module.
 *
 * @param $theme_registry - theme registry passed in to be modified.
 *
 */
function dgu_glossary_theme_registry_alter(&$theme_registry) {
  global $theme;

  $module_path = drupal_get_path('module', 'dgu_glossary');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', $theme, $module_path . "/templates");
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $hook) {
    _dgu_glossary_insert_after_first_element($theme_registry[$hook]['theme paths'], $module_path);
  }
  //Note that lexicon sets the theme path to the module's folder - if things don't
  //quite work, look into that first.
  $theme_registry['lexicon_overview_item']['template'] = 'lexicon-overview-item';
  $theme_registry['lexicon_overview_item']['path'] = $module_path . "/templates";
  $theme_registry['lexicon_overview']['template'] = 'lexicon-overview';
  $theme_registry['lexicon_overview']['path'] = $module_path . "/templates";
  $theme_registry['lexicon_alphabar']['template'] = 'lexicon-alphabar';
  $theme_registry['lexicon_alphabar']['path'] = $module_path . "/templates";
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 */
function _dgu_glossary_insert_after_first_element(&$a, $element) {
  if (is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

function dgu_glossary_preprocess(&$variables, $hook) {
  $path = drupal_get_path('module', 'dgu_glossary');
  drupal_add_css($path . '/css/dgu_glossary.css');
  $show_edit = variable_get('lexicon_show_edit', TRUE); //Vlado check if edit is allowed
  switch ($hook) {
    case 'lexicon_overview_section':
      /*$variables['lexicon_overview_items']=$variables['lexicon_overview_items'] . "<a href='#glossary'>go to top</a>";*/
      break;
    case 'lexicon_overview':
		if ($show_edit)
		{
			$variables['suggest_new_term_link'] = user_access('suggest new terms') ? 'glossary/suggest_new' : '/user/login?destination=glossary/suggest_new';
			$variables['suggest_new_term_text'] = user_access('suggest new terms') ? t('Suggest a new Term') : t('Log in to Suggest a new Term');
		}
      break;
    case 'lexicon_alphabar':
      $path = drupal_get_path('module', 'dgu_glossary');
      drupal_add_js($path . '/js/glossary.js');
      break;
    case 'lexicon_overview_item':
		if ($show_edit)
		{
		  $variables['term']->extralinks['search for term'] = array(
			'name' => t('search for term'),
			'path' => 'search/everything/' . $variables['term']->name,
			'options' => array(
			  'attributes' => array(
				'class' => array('glossary-search-term'),
				'title' => t('search for content using this term'),
			  )
			)
		  );
		}
      $instance = field_info_instance('taxonomy_term', 'field_comment', 'glossary');
      $entity = reply_get_entity($variables['term']->tid, 'taxonomy_term', $instance['id']);
      $variables['count'] = count($entity);
      $variables['directory'] = 'profile/dgu/modules/features/dgu_glossary';
      $variables['term_class'] = empty($variables['term']->field_is_new[LANGUAGE_NONE][0]['value']) ? 'term-existing' : 'term-new';
      break;
    case 'page':
      if (arg(0) == 'glossary' && is_numeric(arg(1))) {
        $term = menu_get_object('taxonomy_term');
        if (!empty($term)){
          drupal_set_title(variable_get('lexicon_title_' . $term->vid, t('Glossary')));
        }
      }
      break;
    case 'taxonomy_term':
      $term = $variables['term'];
      $voc = taxonomy_vocabulary_load($term->vid);
      global $base_url;
      global $user;
      $term_path = '/' . $voc->machine_name . '/' . $variables['tid'];
      $variables['content']['field_endorse']['#weight'] = 98;
      $variables['content']['field_endorse']['#label_display'] = 'hidden';

      // We need the instance id of the comments field on the glossary definition
      // in order to properly build a reply add link
      list(, , $bundle) = entity_extract_ids('taxonomy_term', $term);
      $instances = field_info_instances('taxonomy_term', $bundle, null);
      if (empty($instances['field_comment'])) {
        return;
      }
      $instance = $instances['field_comment'];

      $make_comment_path = $base_url . '/' . 'reply/add/' . $term->tid . '/' . $instance['id'] . '/0';
      $make_comment =  t('Add new comment');
      if (!$user->uid) {
        $make_comment_path = $base_url . "/user/login?destination=/reply/add/{$term->tid}/{$instance['id']}/0";
        $make_comment = t('Login to make a comment');
      }

      $suggest_better_path = $base_url . '/' . $term_path . '/suggest_definition';
      $suggest_better = t('Suggest a better definition');
      if(!user_access('suggest new definitions')){
        $suggest_better_path = $base_url . "/user/login?destination=$term_path/suggest_better";
        $suggest_better = t("Log in to suggest a better definition");

      }

      $variables['content']['glossary_item_actions'] = array(
        '#markup' => theme('glossary_item_actions', array(
            'comment_path' => $make_comment_path,
            'comment_text' => $make_comment,
            'suggest_path' => $suggest_better_path,
            'suggest_text' => $suggest_better,
          )
        ),
        '#weight' => 99,
      );

      $variables['suggested_definitions'] = '';
      $nids = glossary_get_suggested_defs($term);
      if (!empty($nids)){
        $variables['suggested_definitions'] = theme('suggested_definition_list', array('nids' => $nids));
      }

      module_load_include('inc', 'lexicon', 'lexicon.pages');
      $lex = _lexicon_overview($voc);
      $lexicon_overview = $lex['overview']['#lexicon_overview'];
      $lexicon_alphabar = $lex['overview']['#lexicon_alphabar'];
      $variables['lexicon_alphabar'] = $lexicon_alphabar;

      // Lack of time to check why $term->field_comment is empty even if there are comments.
      // Testing for presence of .push class in the markup instead to find if there are any comments.
      if(strpos($variables['content']['field_comment'][0]['#markup'], 'push') == FALSE) {
        // If there are no comments hide 'Add new comment' link to avoid repeating it twice.
        unset($variables['content']['field_comment']);
      }

      unset($variables['content']['field_is_new']);
      $variables['content']['field_quality']['#title'] = 'APPSI quality score';
      $variables['quality_score'] = render($variables['content']['field_quality']);
      hide($variables['content']['field_quality']);
      break;
    default:
      # code...
      break;
  }
}

function glossary_get_suggested_defs($term) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'suggested_definition')
    ->fieldCondition('field_term', 'tid', $term->tid);
  $result = $query->execute();
  $nids = empty($result)?array():array_keys($result['node']);
  return $nids;
}

function template_preprocess_suggested_definition_item(&$variables) {
  $node = $variables['node'];
  $variables['suggested_definition'] = field_view_field('node', $node, 'field_suggested_definition');
  $variables['comments'] = field_view_field('node', $node, 'field_comment');
  $variables['status'] = check_plain(workbench_moderation_state_label($node->workbench_moderation['current']->state));
}

function template_preprocess_suggested_definition_list(&$variables) {
  $defs = array();
  $nids = $variables['nids'];
  foreach ($nids as $nid) {
    $node = node_load($nid);
    $defs[] = theme('suggested_definition_item', array('node' => $node));
  }
  $variables['suggested_definitions'] = $defs;
}

/**
 * Menu callback; displays all nodes associated with a term.
 *
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 */
function glossary_term_page($term) {
  // If there is a menu link to this term, the link becomes the last part of
  // the active trail, and the link name becomes the page title. Thus, we must
  // explicitly set the page title to be the term title.
  drupal_set_title('Glossary');
  drupal_add_feed('glossary/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  // Set the term path as the canonical URL to prevent duplicate content.
  $uri = entity_uri('taxonomy_term', $term);
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Normally we would call taxonomy_term_show() here, but for backwards
  // compatibility in Drupal 7 we do not want to do that (it produces different
  // data structures and HTML markup than what Drupal 7 released with). Calling
  // taxonomy_term_view() directly provides essentially the same thing, but
  // allows us to wrap the rendered term in our desired array structure.
  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );

  return $build;
}

/**
 * Theme function to return a form to submit a new suggested_term node
 *
 * @param $term
 * @return array|mixed
 *
 *
 */
function dgu_glossary_suggest_new_page() {
  global $user;
  $node = (object)array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'suggested_term',
    'language' => LANGUAGE_NONE,
  );
  drupal_set_title(t('Suggest new term and definition'), PASS_THROUGH);
  drupal_set_message(t('You are creating new content, this may be placed in moderation and may not be immediately visible on the site.'));
  $form_state['build_info']['args'] = array($node);
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  $form = drupal_get_form('suggested_term_node_form', $node);
  $form['title']['#value'] = t('New suggested term by @user',
    array('@user' => $user->name));
  unset($form['additional_settings']);

  $form['#attributes']['class'][] = "boxed";
  dgu_moderation_node_forms_alter($form, GLOSSARY_MODERATION_PERMISSION);

  return $form;
}

function dgu_suggested_term_node_form_submit($form, &$form_state) {
  $form_state['values']['title'] = $form_state['values']['field_term_name'][LANGUAGE_NONE][0]['value'];
}

function dgu_glossary_query_alter(QueryAlterableInterface $query) {
  if (FALSE && (empty($_GET['comments']) && $query->hasTag('comment_filter'))) {
    $query-> leftJoin('field_data_field_is_new', 'fn', 't.tid = fn.entity_id');
    $query-> condition(db_or()->condition('field_is_new_value', 0)->isNull('field_status_value'));
  }
}

function dgu_glossary_fivestar_widgets() {
  $widgets = array(
    drupal_get_path('module', 'dgu_glossary') . '/css/appsi_quality_score.css' => 'appsi_quality_score',
  );
  return $widgets;
}

function dgu_glossary_vud_votes_alter(&$votes) {
  drupal_set_message("Your vote has been recorded");
}

/**
 * Implements hook_dgu_moderation_moderator_permission().
 */
function dgu_glossary_dgu_moderation_moderator_permission(&$node) {
  if (($node->type == 'suggested_definition') || ($node->type == 'suggested_term')) {
    return user_access(GLOSSARY_MODERATION_PERMISSION);
  }
}

function dgu_glossary_node_access($node, $op, $account) {
  if ($op != 'create' && isset($node->type) && (($node->type == 'suggested_definition') || ($node->type == 'suggested_term'))) {
    return dgu_moderation_access($account, $node, GLOSSARY_MODERATION_PERMISSION);
  }
}

function dgu_glossary_node_access_records($node) {
  if (($node->type == 'suggested_definition') || ($node->type == 'suggested_term')) {
    return dgu_moderation_get_node_grants($node);
  }
}

function dgu_glossary_node_grants($account, $op) {
  return dgu_moderation_get_account_grants($account, GLOSSARY_MODERATION_PERMISSION);
}
