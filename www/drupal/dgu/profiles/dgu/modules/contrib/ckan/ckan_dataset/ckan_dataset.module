<?php

/**
 * @file
 * CKAN Dataset Entity
 */

define('ADMIN_PATH', 'admin/structure/ckan_dataset');


/**
 * Implements hook_entity_info().
 */
function ckan_dataset_entity_info() {
  $return['ckan_dataset'] = array(
    'label' => t('Dataset'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'CKANDataset',
    'controller class' => 'CKANDatasetController',
    'base table' => 'ckan_dataset',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
    ),
    'bundles' => array(
      'ckan_dataset' => array( // This is the bundle_key.
        'label' => 'CKAN Dataset',
        'admin' => array(
          'path' => ADMIN_PATH,
          'real path' => ADMIN_PATH,
          'access arguments' => array('Administer CKAN'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
      'comments' => array(
        'label' => t('Comments'),
        'custom settings' => TRUE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'ckan_dataset_create',
    'access callback' => 'ckan_dataset_access',
    'module' => 'ckan_dataset',
    // The information below is used by the CKANUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/ckan_datasets',
      'file' => 'ckan_dataset.admin.inc',
      'controller class' => 'CKANDatasetUIController',
      'menu wildcard' => '%ckan_dataset',
    ),
  );

  return $return;
}

/**
 * CKAN Dataset settings form constructor.
 */
function ckan_dataset_structure_page () {
  return '<p>CKAN Dataset doesn\'t support multiple bundles. You can <a href="/' . ADMIN_PATH . '/fields">manage fields</a> and <a href="/' . ADMIN_PATH . '/display">manage display</a> of default bundle.</p>' ;
}

/**
 * Implements hook_permission().
 */
function ckan_dataset_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer CKAN datasets' => array(
      'title' => t('Administer CKAN datasets'),
    ),
    'view CKAN datasets' => array(
      'title' => t('View CKAN datasets'),
    ),
  );
  return $permissions;
}


/**
 * Determines whether the given user has access to a CKAN Dataset.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $ckan_dataset
 *   Optionally a ckan dataset or a ckan dataset type to check access for. If nothing is
 *   given, access for all ckan datasets is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function ckan_dataset_access($op, $ckan_dataset = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view CKAN datasets', $account);
    case 'create':
      return user_access('administer CKAN datasets', $account);
    case 'edit':
      return user_access('administer CKAN datasets', $account);
  }
}

/**
 * Fetch a CKAN Dataset object.
 *
 * @param $id
 *   Integer specifying the ckan id or GUID string.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $ckan object or FALSE if it cannot be loaded.
 *
 * @see ckan_dataset_load_multiple()
 */
function ckan_dataset_load($id, $reset = FALSE) {
  // Get Drupal entity id if CKAN UUID is provided.
  if (strlen($id) == 36) { // UUID length is 36 characters.
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'ckan_dataset')->propertyCondition('ckan_id', $id)->execute();
    if (isset($result['ckan_dataset']) && !empty($result['ckan_dataset'])) {
      $id = array_shift($result['ckan_dataset'])->id;
    }
    else {
      return FALSE;
    }
  }
  $ckan_datasets = ckan_dataset_load_multiple(array($id), array(), $reset);
  return reset($ckan_datasets);
}

/**
 * Load multiple CKAN datasets based on certain conditions.
 *
 * @param $ckan_ids
 *   An array of CKAN IDs.
 * @param $conditions
 *   An array of conditions to match against the {ckan_dataset} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of CKAN objects, indexed by ckan_id.
 *
 * @see entity_load()
 * @see ckan_dataset_load()
 */
function ckan_dataset_load_multiple($ckan_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ckan_dataset', $ckan_ids, $conditions, $reset);
}


/**
 * Deletes a CKAN Dataset.
 */
function ckan_dataset_delete(CKANDataset $ckan) {
  $ckan->delete();
}


/**
 * Delete multiple CKAN Datasets.
 *
 * @param $ckan_ids
 *   An array of ckan IDs.
 */
function ckan_dataset_delete_multiple(array $ckan_ids) {
  entity_get_controller('ckan_dataset')->delete($ckan_ids);
}


/**
 * Create a ckan object.
 */
function ckan_dataset_create($values = array()) {
  return entity_get_controller('ckan_dataset')->create($values);
}


/**
 * Saves a CKAN Dataset to the database.
 *
 * @param $ckan
 *   The CKAN Dataset object.
 */
function ckan_dataset_save(CKANDataset $ckan) {
  return $ckan->save();
}

/**
 * URI callback for CKAN Dataset
 */
function ckan_dataset_uri(CKANDataset $ckan){
  return array(
    'path' => 'ckan_dataset/' . $ckan->id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function ckan_dataset_page_title(CKANDataset $ckan){
  return $ckan->title;
}

/**
 * Sets up content to show an individual CKAN Dataset
 */
function ckan_dataset_page_view($ckan, $view_mode = 'full') {
  $controller = entity_get_controller('ckan_dataset');
  $content = $controller->view(array($ckan->id => $ckan));

  drupal_set_title($ckan->title);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function ckan_dataset_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ckan_dataset') . '/views',
    'views_default file' => 'ckan_dataset.views.inc',
  );
}


/**
 * Implement hook_theme().
 */
function ckan_dataset_theme() {
  return array(
    'ckan_dataset' => array(
      'render element' => 'elements',
      'template' => 'ckan_dataset',
    ),
  );
}

/**
 * The class used for CKAN Datasets
 */
class CKANDataset extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'ckan_dataset');
  }

  protected function defaultLabel() {
    return $this->title;
  }

  protected function defaultUri() {
    return array('path' => 'ckan_dataset/' . $this->id);
  }
}

/**
 * The Controller for CKAN Datasets
 */
class CKANDatasetController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a CKAN Dataset - we first set up the values that are specific
   * to our ckan_dataset schema but then also go through the EntityAPIController
   * function.
   *
   * @return
   *   A ckan dataset object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our CKAN Dataset
    $values += array(
      'id' => '',
      'ckan_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'name' => '',
      'notes' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );

    $ckan = parent::create($values);
    return $ckan;
  }

  /*MODULENAME_views_api()  * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    //TODO add ckan_dataset properties here and remove hardcoded things from the template

    return $content;
  }
}
