<?php
/**
 * @file
 * Code for the DGU User feature.
 */

include_once 'dgu_user.features.inc';

/**
 * Implements hook_block_info().
 */
function dgu_user_block_info() {
  $blocks = array();
  $blocks['dgu_user_email_validation'] = array(
    'info' => t('Unverified email message'),
  );
  $blocks['dgu_user_help'] = array(
    'info' => t('Help page with site tours'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dgu_user_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'dgu_user_email_validation' :
      global $user;
      $block['content'] = 'You will now receive  an email to verify your email address. In order to activate your data.gov.uk account just follow the simple step requested in this email.<br />Use <a href="/user/' . $user->uid . '/profile">My profile</a> tab to add more detail to your profile.<br /><a href="/toboggan/revalidate/' . $user->uid . '">Re-send</a> validation e-mail.';
      break;
    case 'dgu_user_help' :
      global $user;
      $tours = bootstrap_tour_load_all();
      $user_roles = array_keys($user->roles);

      $tour_links = array();
      foreach ($tours as $tour) {
        $roles = array_map('intval',explode(',', $tour->roles));
        if (is_array($user->roles) && array_intersect($user_roles, $roles)) {
          $tour_links[] = l($tour->title, $tour->steps[0]['path'], array('query' => array('tour' => $tour->name)));
        }
      }

      if(!empty($tour_links)) {
        $block['content'] = theme_item_list(array('items' => $tour_links, 'title' => 'Tutorials', 'type' => 'ul', 'attributes' => array('id' => 'available-site-tours')));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgu_user_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $current_pass_description = 'If you want to change your password or email address please enter your current password here. If you have forgotten your password you can <a href="/user/password" title="Request new password via e-mail.">reset it here.</a>';

  $form['account']['#type'] = 'fieldset';
  $form['account']['#collapsible'] = FALSE;
  $form['account']['#title'] = t('My Account');
  $form['account']['current_pass']['#description'] = $current_pass_description;
  $form['account']['mail']['#weight'] = 5;

  $form['account']['contact'] = $form['contact']['contact'];
  $form['account']['contact']['#weight'] = 10;
  unset($form['contact']);
  $form['account']['field_digest_notifier'] = $form['field_digest_notifier'];
  $form['account']['field_digest_notifier']['#weight'] = 12;
  unset($form['field_digest_notifier']);
  unset($form['account']['field_digest_notifier'][LANGUAGE_NONE]['#options']['_none']);

  // Temporarily hide 'Notification frequency' for users with only authenticated role.
  $form['account']['field_digest_notifier'][LANGUAGE_NONE]['#access'] = count($form['#user']->roles) > 1;

  $form['profile']['#type'] = 'fieldset';
  $form['profile']['#collapsible'] = FALSE;
  $form['profile']['#title'] = t('My Profile');

  $form['profile']['field_first_name'] = $form['field_first_name'];
  $form['profile']['field_surname'] = $form['field_surname'];
  $form['profile']['field_job_title'] = $form['field_job_title'];
  $form['profile']['field_bio'] = $form['field_bio'];
  $form['profile']['field_twitter'] = $form['field_twitter'];
  $form['profile']['field_facebook_url'] = $form['field_facebook_url'];
  $form['profile']['field_linkedin_url'] = $form['field_linkedin_url'];
  unset($form['field_first_name']);
  unset($form['field_surname']);
  unset($form['field_job_title']);
  unset($form['field_bio']);
  unset($form['field_twitter']);
  unset($form['field_facebook_url']);
  unset($form['field_linkedin_url']);

  $form['profile']['field_twitter']['#weight'] = 10;
  $form['profile']['field_facebook_url']['#weight'] = 11;
  $form['profile']['field_linkedin_url']['#weight'] = 12;

//  $form['profile']['field_avatar'] = $form['field_avatar'];
//  unset($form['field_avatar']);

  $form['account']['#attributes']['class'][] = 'col-md-6';
  $form['profile']['#attributes']['class'][] = 'col-md-6';


  $form['#after_build'][] = 'dgu_user_profile_after_build';
  $form['#validate'][] = 'dgu_user_profile_validate';
}

function dgu_user_profile_after_build($form, &$form_state) {
  $form['account']['timezone'] = $form['timezone']['timezone'];
  unset($form['timezone']);
  $form['account']['timezone']['#weight'] = 11;
  return $form;
}

function dgu_user_profile_validate($form, &$form_state) {
  if(!empty($form_state['values']['field_facebook_url'][LANGUAGE_NONE][0]['url'])) {
    if(!preg_match('/^(http\:\/\/|https\:\/\/)?(?:www\.)?facebook\.com\/(?:(?:\w\.)*#!\/)?(?:pages\/)?(?:[\w\-\.]*\/)*([\w\-\.]*)/', $form_state['values']['field_facebook_url'][LANGUAGE_NONE][0]['url'])){
      form_set_error('field_facebook_url', 'Not valid Facebook URL');
    }
  }
  if(!empty($form_state['values']['field_linkedin_url'][LANGUAGE_NONE][0]['url'])) {
    if(!preg_match('/^(http(s)?:\/\/)?([\w]+\.)?linkedin\.com\/(pub|in|profile)/', $form_state['values']['field_linkedin_url'][LANGUAGE_NONE][0]['url'])) {
      form_set_error('field_linkedin_url', 'Not valid public Linkedin profile URL');
    }
  }

  if(!empty($form_state['values']['field_twitter'][LANGUAGE_NONE][0]['value'])) {
    $twitter_username = $form_state['values']['field_twitter'][LANGUAGE_NONE][0]['value'];
    if(substr($twitter_username, 0, 1) == '@') {
      $twitter_username = substr($twitter_username, 1);
    }
    if (!preg_match('/^[A-Za-z0-9_]{1,15}$/', $twitter_username)) {
      form_set_error('field_twitter', 'Please use just twitter user name e.g \'@username\'');
    }
  }
}

/**
 * Implements hook_menu_local_task_alter().
 */
function dgu_user_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($router_item['tab_root'] == 'user/%' && dgu_user_accessing_own_account()) {
    $view_tab = current($data['tabs'][0]['output']);

    // Remove 'Edit' tab from primary tabs and move it to secondary tabs.
    // Copy 'View' tab from primary to secondary and rename it in primary row.
    $edit_tab = $data['tabs'][0]['output'][1];
    if(!empty($edit_tab) && $edit_tab['#link']['path'] == 'user/%/edit') {
      unset($data['tabs'][0]['output'][1]);

      $arg2 = arg(2);
      if(arg(0) == 'user' && is_numeric(arg(1)) && (arg(2) == 'edit' || empty($arg2))) {
        $data['tabs'][1]['count'] = 2;
        $data['tabs'][1]['output'] = array($view_tab, $edit_tab);
        $data['tabs'][0]['output'][0]['#active']  = TRUE;
      }

      $data['tabs'][0]['output'][0]['#link']['title'] = 'My profile';

      $data['tabs'][0]['output'][2]['#link']['title'] = 'My subscriptions';
    }

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array('title' => 'Manage my content', 'href' => 'admin/workbench', 'localized_options' => array()),
      '#active' => FALSE,
    );

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array('title' => 'Create content', 'href' => 'admin/workbench/create', 'localized_options' => array()),
      '#active' => FALSE,
    );

    if(user_access('bypass node access')) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'File list', 'href' => 'admin/workbench/files', 'localized_options' => array()),
        '#active' => FALSE,
      );
    }
    if(user_access('view all unpublished content')) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'Offensive content', 'href' => 'admin/workbench/offensive-content', 'localized_options' => array()),
        '#active' => FALSE,
      );
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'Offensive replies', 'href' => 'admin/workbench/offensive-replies', 'localized_options' => array()),
        '#active' => FALSE,
      );
    }

    if(user_access('use workbench_moderation needs review tab')) {
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'Needs review', 'href' => 'admin/workbench/needs-review', 'localized_options' => array()),
        '#active' => FALSE,
      );
    }

  }
  elseif ($router_item['tab_root'] == 'admin/workbench') {
    global $user;
    $data['tabs'][0]['output'][0]['#link']['title'] = 'Manage my content';
    $my_profile = array(
      array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'My profile', 'href' => 'user/' . $user->uid, 'localized_options' => array()),
        '#active' => FALSE,
      ),
    );
    $my_subscriptions = array(
      array(
        '#theme' => 'menu_local_task',
        '#link' => array('title' => 'My subscriptions', 'href' => 'user/' . $user->uid . '/message-subscribe', 'localized_options' => array()),
        '#active' => FALSE,
      ),
    );
    array_unshift($data['tabs'][0]['output'], $my_profile, $my_subscriptions);
  }
}

function dgu_user_accessing_own_account() {
  if(arg(0) == 'user' && is_numeric(arg(1))) {
    global $user;
    $profile_uid = arg(1);
    if ($user->uid == $profile_uid) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_user_login().
 */
function dgu_user_user_login(&$edit, $account) {
  $_SESSION['ping_ckan'] = TRUE;
}

/**
 * Implements hook_page_alter().
 */
function dgu_user_page_alter(&$page) {
  // Hide Toolbar for those who can access the Admin Menu.
  if (user_access('access administration menu') && isset($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#access'] = FALSE;
  }

  if(!empty($_SESSION['ping_ckan'])) {
    drupal_add_js(
      'jQuery(document).ready(function () {
         $.get("/data/search");
       });',
      'inline');
    unset($_SESSION['ping_ckan']);
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_user_menu_breadcrumb_alter(&$active_trail, $item) {

  if($active_trail[1]['href'] == 'node/add') {
    $active_trail[1]['href'] = 'admin/workbench/create';
  }

  if ($item['path'] == 'user') {
    drupal_set_title('User account');
  }

  if ($item['path'] == 'user/login') {
    drupal_set_title('Login');
  }

  if ($item['path'] == 'user/register') {
    drupal_set_title('Register');
  }

  if ($item['path'] == 'user/%/edit') {
    drupal_set_title('Edit');
  }

  if ($item['path'] == 'admin/workbench/content/data-requests' || $item['path'] == 'admin/workbench/content/active') {
    unset($active_trail[0]);
  }

  if (($item['path'] == 'user/%/content' || $item['path'] == 'user/%/comments') && arg(0) == 'user' && is_numeric(arg(1))) {
    $user = user_load(arg(1));
    //drupal_set_title('User comments');
    $active_trail[1]['title'] = $user->name;
    $active_trail[1]['href'] = 'user/' . $user->uid;
    $active_trail[1]['path'] = 'user/' . $user->uid;
  }

  if ($item['path'] == 'user/%/message-subscribe') {
    if (dgu_user_accessing_own_account()) {
      unset($active_trail[1]);
      drupal_set_title('My subscriptions');
    }
    else {
      drupal_set_title('Subscriptions');
    }
  }

  if (arg(0) == 'user' && is_numeric(arg(1)) && arg(2) == NULL && dgu_user_accessing_own_account()) {
    if (arg(2) == 'edit') {
      drupal_set_title('Edit my profile');
      $breadcrumb = array();
      $breadcrumb[] = l('Home', '<front>');
      drupal_set_breadcrumb($breadcrumb);
    }
    else {
      drupal_set_title('My profile');
    }
  }
}

function dgu_user_workbench_content_alter(&$output) {
  // Remove profile section.
  unset($output['workbench_current_user']);
  // Remove My Edits view.
  unset($output['workbench_edited']);
  // Remove All Recent Content view.
  unset($output['workbench_recent_content']);

  $output['workbench_my_content'] = array(
    '#view' => 'my_content',
    '#view_display' => 'block',
    '#attributes' => array('class' => array('clearfix')),
    '#theme' => 'workbench_element',
  );
  $output['workbench_my_comments'] = array(
    '#view' => 'user_replies',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('clearfix')),
    '#theme' => 'workbench_element',
  );
}

/**
 * Implements hook_workbench_create_alter().
 *
 * Remove Suggested term and Suggested definition from 'Create content' workbench section.
 */
function dgu_user_workbench_create_alter(&$output) {
  drupal_set_title('Create content');
  $output = array();
  $item = menu_get_item('node/add');
  $content = system_admin_menu_block($item);

  foreach($content as $key => &$value) {
    if ($value['router_path'] == 'node/add/suggested-definition' || $value['router_path'] == 'node/add/suggested-term') {
      unset($content[$key]);
    }
  }

  if (!empty($content)) {
    // Theme the arrray of content type creation links.
    $output['#markup'] = '<div class="workbench-add-content">' . theme('node_add_list', array('content' => $content)) . '</div>';
  }
  else {
    $output['#markup'] .= t('You cannot create any new content. Please contact the site administrator.');
  }
}

/**
 *  Implements hook_preprocess_user_profile().
 */
function dgu_user_preprocess_user_profile(&$variables) {
  $variables['colour'] = $variables['elements']['#account']->uid % 10;
  $colour = $variables['elements']['#account']->uid % 10;
  $variables['user_profile']['field_avatar']['classes_array'] = array('bg-colour-' . $colour);

  $variables['full_name'] = isset($variables['field_first_name'][0]['safe_value']) ? $variables['field_first_name'][0]['safe_value'] : FALSE;

  if (isset($variables['field_surname'][0]['safe_value'])) {
    if (isset($variables['full_name'])) {
      $variables['full_name'] = $variables['full_name'] . ' ' . $variables['field_surname'][0]['safe_value'];
    }
    else {
      $variables['full_name'] = $variables['field_surname'][0]['safe_value'];
    }
  }

  $variables['twitter'] = isset($variables['field_twitter'][0]['safe_value']) ? $variables['field_twitter'][0]['safe_value'] : FALSE;

  if (substr($variables['twitter'], 0, 1) == '@') {
    // Just the username without @ character.
    $variables['twitter'] = substr($variables['twitter'], 1);
  }

  if (isset($variables['field_linkedin_url'][0]['url'])) {
    $parts = parse_url($variables['field_linkedin_url'][0]['url']);
    $parts['query'] = isset($parts['query']) ? $parts['query'] : '';
    $variables['linkedin'] = $parts['host'] . $parts['path'] . $parts['query'];
  }
  else {
    $variables['linkedin'] = FALSE;
  }

  if (isset($variables['field_facebook_url'][0]['url'])) {
    $parts = parse_url($variables['field_facebook_url'][0]['url']);
    $parts['query'] = isset($parts['query']) ? $parts['query'] : '';
    $variables['facebook'] = $parts['host'] . $parts['path'] . $parts['query'];
  }
  else {
    $variables['facebook'] = FALSE;
  }

  $variables['bio'] = isset($variables['field_bio'][0]['safe_value']) ? $variables['field_bio'][0]['safe_value'] : FALSE;
  $variables['job_title'] = isset($variables['field_job_title'][0]['safe_value']) ? $variables['field_job_title'][0]['safe_value'] : FALSE;
  $variables['member_for'] =  $variables['user_profile']['summary']['member_for']['#title'] . ' ' . $variables['user_profile']['summary']['member_for']['#markup'];

  $plural_types = dgu_site_feature_get_plural_content_types();

  $uid = $variables['elements']['#account']->uid;

  $query = db_select('node', 'n');
  $query->fields('n', array('type'))
    ->condition('n.uid', $uid)
    ->condition('n.type', array('app', 'blog', 'forum', 'dataset_request'), 'IN')
    ->addTag('node_access')
    ->groupBy('n.type')
    ->addExpression('COUNT(nid)', 'count');
  $result = $query->execute();

  $variables['stats'] = '';
  foreach ($result as $row) {
    $variables['stats'] .= '<div><a href="/user/' .$variables['elements']['#account']->uid. '/content?type=' . $row->type. '">' . $plural_types[$row->type] . '</a><span> (' . $row->count . ')</span></div>';
  }

  $query = db_select('reply', 'r');
  $query->condition('r.uid', $uid)
    ->condition('r.status', 1)
    ->condition('r.bundle', 'comment')
    ->groupBy('r.entity_id AND r.entity_type')
    ->addExpression('COUNT(r.id)', 'count');
  $result = $query->execute();


  if($comments_count = $result->fetchField()) {
    $variables['stats'] .= '<div><a href="/user/' .$variables['elements']['#account']->uid. '/comments">Comments</a><span> (' . $comments_count . ')</span></div>';
  }

  if ($variables['stats']) {
    $variables['stats'] = '<div class="view user-stats">' . $variables['stats'] . '</div>';
  }


  $recent_content = views_embed_view('user_content', 'block');
  $variables['recent_content'] = strpos($recent_content, 'view-content') ? $recent_content : FALSE;

  $recent_comments = views_embed_view('user_replies', 'block_3');
  $variables['recent_comments'] = strpos($recent_comments, 'view-content') ? $recent_comments : FALSE;
}

/**
 * Implements hook_preprocess_page().
 *
 * To move field_avatar in to 'My Profile', this causes ajax errors if happens in hook_form_alter().
 */
function dgu_user_preprocess_page(&$variables) {
  if(arg(0) == 'user' && arg(2) == 'edit' && isset($variables['page']['content']['system_main']['field_avatar'])) {
    $variables['page']['content']['system_main']['profile']['field_avatar'] = $variables['page']['content']['system_main']['field_avatar'];
    unset($variables['page']['content']['system_main']['field_avatar']);
  }
}