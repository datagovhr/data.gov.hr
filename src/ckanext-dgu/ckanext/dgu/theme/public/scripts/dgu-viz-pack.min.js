(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.viz == null) {
    window.viz = {};
  }

  viz.StackedBarChart = (function() {
    function StackedBarChart(selector, data) {
      var margin, trim, xAxis, yAxis;
      this.selector = selector;
      this.setData = __bind(this.setData, this);
      margin = {
        top: 20,
        right: 290,
        bottom: 30,
        left: 40
      };
      this.width = 920 - margin.left - margin.right;
      this.height = 500 - margin.top - margin.bottom;
      this.svg = d3.select(this.selector).append("svg").attr("width", this.width + margin.left + margin.right).attr("height", this.height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      this.x = d3.scale.ordinal().rangeRoundBands([0, this.width], .1);
      this.y = d3.scale.linear().range([this.height, 0]);
      xAxis = d3.svg.axis().scale(this.x).orient("bottom");
      yAxis = d3.svg.axis().scale(this.y).orient("left").tickFormat(d3.format(".2s"));
      this.x.domain(data.series.map(function(d) {
        return d.major;
      }));
      this.y.domain([
        0, d3.max(data.series, function(d) {
          return d3.sum(d.elements, function(d) {
            return d.value;
          });
        })
      ]);
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(xAxis);
      this.svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Cash Invested");
      viz.legend(d3.select('#graph_yearonyear'), viz.sector_list, viz.sector_color, trim = 34);
      this.setData(data);
    }

    StackedBarChart.prototype.setData = function(data) {
      var column, rects,
        _this = this;
      data.series.forEach(function(series) {
        var sumOfPrevious;
        sumOfPrevious = 0;
        series.elements.forEach(function(d) {
          d.sumOfPrevious = sumOfPrevious;
          return sumOfPrevious += d.value;
        });
        return series.sum = sumOfPrevious;
      });
      column = this.svg.selectAll(".column").data(data.series);
      column.enter().append("g").attr("class", "column").append('text');
      column.attr("transform", function(d) {
        return "translate(" + _this.x(d.major) + ",0)";
      }).select('text').style('fill', 'white').text(function(d) {
        return '£' + viz.money_to_string(d.sum);
      }).attr('x', 30).attr('y', function(d) {
        return _this.y(d.sum) - 5;
      }).transition().duration(500).delay(500).style('fill', 'black');
      rects = column.selectAll("rect").data(function(d) {
        return d.elements;
      });
      rects.enter().append("rect").attr("class", function(d) {
        return "hoverable hover-" + viz.text_to_css_class(d.name);
      }).attr("width", this.x.rangeBand()).attr('y', this.height).attr('height', 0).style("fill", function(d) {
        return viz.sector_color(d.name);
      }).attr('data-col1', function(d) {
        return viz.sector_color(d.name);
      }).attr('data-col2', function(d) {
        return d3.rgb(viz.sector_color(d.name)).brighter(0.3);
      });
      return rects.transition().duration(800).attr("y", function(d) {
        return _this.y(d.value + d.sumOfPrevious);
      }).attr("height", function(d) {
        return _this.height - _this.y(d.value);
      });
    };

    return StackedBarChart;

  })();

}).call(this);

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.viz == null) {
    window.viz = {};
  }

  viz.CashTotal = (function() {
    function CashTotal(selector, data) {
      this.selector = selector;
      this.setData = __bind(this.setData, this);
      this.setData(data);
    }

    CashTotal.prototype.setData = function(data) {
      return d3.select(this.selector).data([data]).html(function(d) {
        return '<span class="poundsign">£</span>' + viz.money_to_string(data);
      }).style('color', 'white').transition().duration(500).delay(100).style('color', 'black');
    };

    return CashTotal;

  })();

}).call(this);

(function() {
  if (window.viz == null) {
    window.viz = {};
  }

  viz.PieChart = (function() {
    function PieChart(selector, data, colorFunction, _options) {
      var caption, container, k, options, v,
        _this = this;
      this.selector = selector;
      this.colorFunction = colorFunction;
      if (_options == null) {
        _options = {};
      }
      options = {
        width: 450,
        height: 200,
        trimLegend: -1,
        legendData: data.map(function(x) {
          return x.name;
        }),
        radius: -1,
        innerRadius: -1,
        legend: true
      };
      for (k in _options) {
        v = _options[k];
        options[k] = v;
      }
      if (options.radius === -1) {
        options.radius = Math.min(options.width, options.height) / 2;
      }
      if (options.innerRadius === -1) {
        options.innerRadius = options.radius - 50;
      }
      this.arc = d3.svg.arc().outerRadius(options.radius).innerRadius(options.innerRadius);
      this.pie = d3.layout.pie().sort(null).value(function(d) {
        return d.value;
      });
      container = $(this.selector);
      this.svg = d3.select(this.selector).append("svg").attr("width", options.width).attr("height", options.height).append("g").attr("transform", "translate(" + options.radius + "," + options.radius + ")");
      this.path = this.svg.datum(data).selectAll('path').data(this.pie).enter().append('path').attr('fill', function(d, i) {
        return _this.colorFunction(d.data.name);
      }).attr('d', this.arc).each(function(d) {
        return this._current = d;
      }).attr('data-caption', function(d) {
        return '£' + viz.money_to_string(d.value);
      }).attr("class", function(d) {
        return "hoverable hover-" + viz.text_to_css_class(d.data.name);
      });
      if (options.legend) {
        viz.legend(d3.select(this.selector), options.legendData, this.colorFunction, options.trimLegend);
      }
      caption = d3.select(this.selector).select('.caption');
      container.find('path').bind('hoverend', function(e) {
        return caption.html('');
      });
      container.find('path').bind('hoverstart', function(e) {
        return caption.html(this.getAttribute('data-caption'));
      });
    }

    PieChart.prototype.setData = function(data) {
      var arcTween, captureArc;
      $('.hoverable').trigger('hoverend');
      captureArc = this.arc;
      arcTween = function(a) {
        var i;
        i = d3.interpolate(this._current, a);
        this._current = i(0);
        return function(t) {
          return captureArc(i(t));
        };
      };
      return this.path = this.svg.datum(data).selectAll('path').data(this.pie).attr('data-caption', function(d) {
        return '£' + viz.money_to_string(d.value);
      }).transition().duration(800).delay(100).attrTween("d", arcTween);
    };

    return PieChart;

  })();

}).call(this);

(function() {
  if (window.viz == null) {
    window.viz = {};
  }

  viz.Sankey = (function() {
    function Sankey(selector, data) {
      var calculateNodeColor, calculateNodeName, color, dragmove, format, formatNumber, height, link, node, path, sankey, svg, width;
      width = 900;
      height = 500;
      formatNumber = d3.format(",.0f");
      format = function(x) {
        return '£' + viz.money_to_string(x);
      };
      color = d3.scale.category20c();
      svg = d3.select(selector).append("svg").attr("width", width).attr("height", height);
      sankey = d3.sankey().nodeWidth(15).nodePadding(10).size([width, height - 13]);
      path = sankey.link();
      dragmove = function(d) {
        d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
        sankey.relayout();
        return link.attr("d", path);
      };
      calculateNodeColor = function(d) {
        var base_color, index, palette;
        index = Math.floor(d.x / 230);
        palette = ['#E81308', '#FF04A7', '#5109FF', '#1030FF'];
        base_color = d3.rgb(palette[index]).brighter(2);
        return base_color.darker(d.y / 400);
      };
      sankey.nodes(data.nodes).links(data.links).layout(32);
      link = svg.append("g").selectAll(".link").data(data.links).enter().append("path").attr("class", "link").attr("d", path).style("stroke-width", function(d) {
        return Math.max(1, d.dy);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      });
      link.append("title").text(function(d) {
        var out, x, _i, _len, _ref;
        out = '';
        _ref = d.foundationSplit;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          out += '\n' + x[0] + ': ' + format(x[1]);
        }
        if (d.foundationSplit.length > 1) {
          out += '\n--------------';
          out += '\nTotal: ' + format(d.value);
        }
        return out.substr(1);
      });
      node = svg.append("g").selectAll(".node").data(data.nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).call(d3.behavior.drag().origin(function(d) {
        return d;
      }).on("dragstart", function() {
        return this.parentNode.appendChild(this);
      }).on("drag", dragmove));
      node.append("rect").attr("height", function(d) {
        return d.dy;
      }).attr("width", sankey.nodeWidth()).style("fill", function(d) {
        return d.color = color(d.name.replace(RegExp(" .*"), ""));
      }).style("fill", calculateNodeColor).append("title").style("stroke", function(d) {
        return d3.rgb(d.color).darker(2);
      }).text(function(d) {
        return d.name + "\n" + format(d.value);
      });
      calculateNodeName = function(d) {
        if (d.name.length > 40) {
          return d.name.substr(0, 40) + '...';
        }
        return d.name;
      };
      node.append("text").attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).text(calculateNodeName).filter(function(d) {
        return d.x < width / 2;
      }).attr("x", 6 + sankey.nodeWidth()).attr("text-anchor", "start");
    }

    return Sankey;

  })();

}).call(this);

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.viz == null) {
    window.viz = {};
  }

  viz.Sunburst = (function() {
    function Sunburst(selector, root) {
      var caption, color, height, path, radius, svg, width;
      this.selector = selector;
      this.linear = __bind(this.linear, this);
      this.logarithmic = __bind(this.logarithmic, this);
      width = 500;
      height = 500;
      radius = Math.min(width, height) / 2;
      color = d3.scale.category10();
      caption = d3.select(this.selector).select('.caption');
      svg = d3.select(this.selector).append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
      this.partition = d3.layout.partition().sort(null).size([2 * Math.PI, radius * radius]).value(function(d) {
        return Math.log(d.size);
      });
      this.arc = d3.svg.arc().startAngle(function(d) {
        return d.x;
      }).endAngle(function(d) {
        return d.x + d.dx;
      }).innerRadius(function(d) {
        return Math.sqrt(d.y);
      }).outerRadius(function(d) {
        return Math.sqrt(d.y + d.dy);
      });
      path = svg.datum(root).selectAll("path").data(this.partition.nodes).enter().append("path").attr("display", function(d) {
        if (d.depth) {
          return null;
        } else {
          return "none";
        }
      }).attr("d", this.arc).style("stroke", "#fff").style("fill", function(d) {
        if (d.children) {
          return '#ccc';
        } else if (d.name === '(others)') {
          return '#eee';
        } else {
          return color(d.name);
        }
      }).style("fill-rule", "evenodd").on('mouseover', function(d) {
        return caption.html('<p>£' + viz.money_to_string(d.size) + '</p><small>' + d.name + '</small>');
      }).on('mouseout', function(d) {
        return caption.html('');
      });
    }

    Sunburst.prototype.logarithmic = function() {
      console.log('logarithmic');
      return this.partition.value(function(d) {
        return Math.log(d.size);
      });
    };

    Sunburst.prototype.linear = function() {
      var svg;
      console.log('linear');
      this.partition.value(function(d) {
        return d.size;
      });
      console.log(this.partition.nodes);
      svg = d3.select(this.selector);
      return svg.selectAll('path').data(this.partition.nodes);
    };

    return Sunburst;

  })();

}).call(this);

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.viz == null) {
    window.viz = {};
  }

  window.viz.loadFrontPage = function() {
    var barChart;
    return barChart = new viz.frontPageStackedBar(window.viz_graph_datasets);
  };

  window.viz.frontPageStackedBar = (function() {
    function frontPageStackedBar(data) {
      this.setData(data);
    }

    frontPageStackedBar.prototype.setData = function(data) {
      var color, height, legend, margin, stack, state, svg, width, x, xAxis, y, yAxis;
      data = d3.csv.parse(data);
      stack = ['published', 'unpublished'];
      margin = {
        top: 20,
        right: 20,
        bottom: 20,
        left: 40
      };
      width = 560 - margin.left - margin.right;
      height = 300 - margin.top - margin.bottom;
      x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      y = d3.scale.linear().rangeRound([height, 0]);
      color = d3.scale.ordinal().range(["#8BC658", "#bedba4"]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(d3.format(".2s"));
      svg = d3.select(".graph1").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).style("margin", "0 auto").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      color.domain(d3.keys(data[0]).filter(function(key) {
        return key !== "date";
      }));
      data.forEach(function(d) {
        var y0;
        y0 = 0;
        d.ages = color.domain().map(function(name) {
          return {
            name: name,
            y0: y0,
            y1: y0 += +d[name]
          };
        });
        return d.total = d.ages[d.ages.length - 1].y1;
      });
      x.domain(data.map(function(d) {
        return d.date;
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return d.total;
        })
      ]);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").append("text").attr("x", 6).attr("y", 6).attr("dy", ".71em").text("Weekly Sample");
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("No. of Datasets");
      state = svg.selectAll(".state").data(data).enter().append("g").attr("class", "g").attr("transform", function(d) {
        return "translate(" + x(d.date) + ",0)";
      });
      state.selectAll("rect").data(function(d) {
        return d.ages;
      }).enter().append("rect").attr("width", x.rangeBand()).attr("y", function(d) {
        return y(d.y1);
      }).attr("height", function(d) {
        return y(d.y0) - y(d.y1);
      }).style("fill", function(d) {
        return color(d.name);
      });
      legend = svg.selectAll(".legend").data(color.domain().slice().reverse()).enter().append("g").attr("class", "legend").attr("transform", function(d, i) {
        return "translate(0," + i * 20 + ")";
      });
      legend.append("rect").attr("x", width / 3 - 18).attr("width", 18).attr("height", 18).style("fill", color);
      return legend.append("text").attr("x", width / 3 - 24).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(d) {
        return d;
      });
    };

    return frontPageStackedBar;

  })();

  window.viz.loadSocialInvestmentsAndFoundations = function() {
    return d3.json("/scripts/json/social_investments_and_foundations/pandas_graphs.json", function(data) {
      var graph_coinvestmentTotal, graph_investmentTotal, graph_pie1, graph_pie2, graph_sankey, graph_stackedBar, graph_sunburst;
      data.pie1['all'].forEach(function(x) {
        viz.sector_color(x.name);
        return viz.sector_list.push(x.name);
      });
      graph_sankey = new viz.Sankey("#social_investment_sankey", data.sankey);
      graph_stackedBar = new viz.StackedBarChart('#graph_yearonyear', data.bar.all);
      graph_coinvestmentTotal = new viz.CashTotal('#coinvestment-total', data.coinvestment_total);
      graph_investmentTotal = new viz.CashTotal('#investment-total', data.investment_total['all']);
      graph_sunburst = new viz.Sunburst('#social_investment_coinvestment', data.sunburst);
      graph_pie1 = new viz.PieChart('#graph_pie1', data.pie1['all'], viz.sector_color, {
        trimLegend: 32,
        legendData: viz.sector_list
      });
      graph_pie2 = new viz.PieChart('#graph_pie2', data.pie2['all'], viz.colour_product_type());
      $('.foundation-selector a').on('click', function(event) {
        var key;
        event.preventDefault();
        key = $(this).attr('data-key');
        graph_stackedBar.setData(data.bar[key]);
        graph_pie1.setData(data.pie1[key]);
        graph_pie2.setData(data.pie2[key]);
        graph_investmentTotal.setData(data.investment_total[key]);
        $('.foundation-selector a').removeClass('active');
        $('.foundation-selector a[data-key="' + key + '"]').addClass('active');
        return false;
      });
      return $('.hoverable').on('mouseover', function(e) {
        var classes, elements, x, _i, _len, _results;
        $('li.hoverable').removeClass('hovering');
        $('svg .hoverable').each(function(i, el) {
          return $(el).css({
            'fill': $(el).attr('data-col1'),
            'stroke': 'none'
          });
        });
        $('.hoverable').trigger('hoverend');
        $('circle.hoverable').css('opacity', 0.5);
        classes = $(this).attr('class').split(' ');
        _results = [];
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          x = classes[_i];
          if (x.substring(0, 6) === 'hover-') {
            elements = $('.' + x);
            elements.trigger('hoverstart');
            _results.push(elements.each(function(i, el) {
              el = $(el);
              if (el.is('li')) {
                if (e.type === "mouseover") {
                  return el.addClass('hovering');
                } else {
                  return el.removeClass('hovering');
                }
              } else if (el.is('rect') || el.is('path') || el.is('circle')) {
                if (e.type === "mouseover") {
                  el.css('fill', el.attr('data-col2'));
                  el.css('stroke', '#000');
                } else {
                  el.css('fill', el.attr('data-col1'));
                  el.css('stroke', 'none');
                }
                if (el.is('circle')) {
                  return el.css('opacity', 1);
                }
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    });
  };

  window.viz.loadInvestmentReadiness = function() {
    return d3.json('/scripts/json/investment-readiness-programme/investment-readiness-d3.json', function(data) {
      var color1, color2, graph_pie1, graph_pie2, i, money, n, piechart_options, rowz, sector_legend, vizTable, _i;
      new viz.Headline(d3.select('#icrf_headline1'), data.icrf_mean, 'mean investment', money = true);
      new viz.Headline(d3.select('#icrf_headline2'), data.icrf_count, 'organisations funded');
      new viz.MoneyLine(d3.select('#icrf_cash'), data.icrf_items);
      d3.select('#icrf_map').html('(map goes here)');
      vizTable = new viz.SibTable('#sib_table', data.sib);
      window.data = data;
      sector_legend = [];
      color1 = d3.scale.category20();
      color2 = d3.scale.category20();
      for (i = _i = 1; _i <= 8; i = ++_i) {
        color2('x' + i);
      }
      piechart_options = {
        width: 170,
        height: 190,
        innerRadius: 0,
        radius: 85,
        trimLegend: 35,
        legend: true
      };
      graph_pie1 = new viz.PieChart('#sib_pie1', data.sib[0].sector_pie, color1, piechart_options);
      graph_pie2 = new viz.PieChart('#sib_pie2', data.sib[0].target_pie, color2, piechart_options);
      rowz = d3.select('#sib_table').selectAll('.sib_row');
      rowz.each(function(data, index) {
        return this.onclick = (function(event) {
          rowz.classed('active', function(dd, ii) {
            return ii === index;
          });
          graph_pie1.setData(data.sector_pie);
          graph_pie2.setData(data.target_pie);
          return d3.selectAll('#sib_container .venturename').text(data.name);
        });
      });
      rowz.on('click', function(event) {
        return this.onclick(event);
      });
      d3.select(rowz[0][0]).classed('active', true);
      n = 1;
      d3.selectAll('#sib_container .icon').each(function(d) {
        var text;
        text = data.icon_to_sector[d];
        return $(this).tooltip({
          title: text,
          placement: 'bottom'
        });
      });
      return $('.hoverable').on('mouseover', function(e) {
        var classes, elements, x, _j, _len, _results;
        $('li.hoverable').removeClass('hovering');
        $('svg .hoverable').each(function(i, el) {
          return $(el).css({
            'fill': $(el).attr('data-col1'),
            'stroke': 'none'
          });
        });
        $('.hoverable').trigger('hoverend');
        $('circle.hoverable').css('opacity', 0.5);
        classes = $(this).attr('class').split(' ');
        _results = [];
        for (_j = 0, _len = classes.length; _j < _len; _j++) {
          x = classes[_j];
          if (x.substring(0, 6) === 'hover-') {
            elements = $('.' + x);
            elements.trigger('hoverstart');
            _results.push(elements.each(function(i, el) {
              el = $(el);
              if (el.is('li')) {
                if (e.type === "mouseover") {
                  return el.addClass('hovering');
                } else {
                  return el.removeClass('hovering');
                }
              } else if (el.is('rect') || el.is('path') || el.is('circle')) {
                if (e.type === "mouseover") {
                  el.css('fill', el.attr('data-col2'));
                  el.css('stroke', '#000');
                  el.addClass('hovering');
                } else {
                  el.css('fill', el.attr('data-col1'));
                  el.css('stroke', 'none');
                  el.removeClass('hovering');
                }
                if (el.is('circle')) {
                  return el.css('opacity', 1);
                }
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    });
  };

  viz.MoneyLine = (function() {
    function MoneyLine(domElement, items) {
      var containerBounds, max, min, point_color;
      this.domElement = domElement;
      this.items = items;
      this.onMouseOut = __bind(this.onMouseOut, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.domElement.style('position', 'relative');
      this.mouseOverBox = this.domElement.append('div').classed('moneyline_mouseover', true);
      this.container = this.domElement.append('div').classed('moneyline', true);
      this.container.append('div').classed('bg', true);
      min = d3.min(this.items, function(d) {
        return d.amount;
      }) * 0.95;
      max = d3.max(this.items, function(d) {
        return d.amount;
      }) * 1.05;
      point_color = d3.interpolateRgb('#5c5', '#00f');
      this.points = this.container.selectAll('.point').data(this.items).enter().append('div').classed('point', true).style('left', function(d) {
        return ((d.amount - min) * 100) / (max - min) + '%';
      }).style('background', function(d) {
        return point_color((d.amount - min) / (max - min));
      });
      this.container.append('div').classed('min', true).html('£' + viz.money_to_string(Math.floor(min)));
      this.container.append('div').classed('max', true).html('£' + viz.money_to_string(Math.ceil(max)));
      this.container.on('mousemove', this.onMouseMove);
      this.domElement.on('mouseout', this.onMouseOut);
      this.containerBounds = containerBounds = this.container[0][0].getBoundingClientRect();
      this.points.each(function() {
        return this.myLeft = this.getBoundingClientRect().left - containerBounds.left;
      });
      this.container.append('div').classed('moneyline_hint', true).html('Who has received investments?<br/>Point your mouse for details.');
    }

    MoneyLine.prototype.onMouseMove = function() {
      var html, left, lit, max_w;
      left = d3.mouse(this.container[0][0])[0];
      lit = [];
      this.points.classed('active', function(d) {
        if (Math.abs(left - this.myLeft) < 8) {
          lit.push(d);
          return true;
        }
      });
      if (lit.length) {
        lit.sort(function(a, b) {
          return a.amount - b.amount;
        });
        html = lit.map(function(x) {
          var link;
          link = x.url ? "<a href=\"" + x.url + "\">" + x.name + "</a>" : x.name;
          return "<div class=\"entry\">" + link + " <b>£" + (viz.money_to_string(x.amount)) + "</b></div>";
        }).join('<hr/>');
        max_w = this.containerBounds.width - 250;
        return this.mouseOverBox.html(html).style('left', Math.max(0, Math.min(max_w, left - 125)) + 'px').style('display', 'block');
      } else {
        return this.mouseOverBox.style('display', 'none');
      }
    };

    MoneyLine.prototype.onMouseOut = function() {
      this.points.classed('active', false);
      return this.mouseOverBox.style('display', 'none');
    };

    return MoneyLine;

  })();

  viz.SibTable = (function() {
    function SibTable(selector, data) {
      var row, table;
      this.selector = selector;
      this.data = data;
      table = d3.select(this.selector);
      row = table.selectAll('div.sib_row').data(this.data).enter().append('div').classed('sib_row', true);
      row.append('div').classed('name', true).html(function(d) {
        return "<img src=\"" + d.img + "\"/>";
      });
      row.each(function(d) {
        return new viz.Headline(d3.select(this).append('div').classed('funding', true), d.total_funding, 'Total Funding', true);
      });
      row.each(function(d) {
        return new viz.Headline(d3.select(this).append('div').classed('mean', true), d.mean_investment, 'Mean Investment', true);
      });
      row.append('div').classed('investments', true).html(function(d) {
        return "<div class=\"prefix\">Investment Ventures (" + d.investment_sectors.length + "): </div>";
      }).selectAll('i').data(function(d) {
        return d.investment_sectors;
      }).enter().append('i').classed('icon', true).each(function(d) {
        return this.className += ' ' + d;
      });
    }

    return SibTable;

  })();

  viz.Headline = (function() {
    function Headline(domElement, top, bottom, money) {
      this.domElement = domElement;
      if (money == null) {
        money = false;
      }
      if (top === -1) {
        top = '<span class="unknown">(unknown)</span>';
      } else if (money) {
        top = '<span class="poundsign">£</span>' + viz.money_to_string(top);
      }
      this.container = this.domElement.append('div').classed('headline', true);
      this.container.append('div').classed('top', true).html(top);
      this.container.append('div').classed('bottom', true).html(bottom);
    }

    return Headline;

  })();

  viz.trim = function(x, maxlen) {
    if ((maxlen >= 0) && (x.length > maxlen)) {
      return x.substr(0, maxlen) + '...';
    }
    return x;
  };

  viz.money_to_string = function(amount) {
    var out;
    out = '';
    amount = String(amount);
    while (amount.length > 3) {
      out = ',' + amount.substring(amount.length - 3) + out;
      amount = amount.substring(0, amount.length - 3);
    }
    return amount + out;
  };

  viz.sector_color = d3.scale.category20();

  viz.sector_list = [];

  viz.text_to_css_class = function(x) {
    return x.toLowerCase().replace(/[ ]/g, '-').replace(/[^a-z-]/g, '');
  };

  viz.colour_product_type = function() {
    var known_colors;
    known_colors = [];
    return function(x) {
      var index;
      index = known_colors.indexOf(x);
      if (index === -1) {
        known_colors.push(x);
        index = known_colors.indexOf(x);
      }
      if (x === 'Loans and facilities - Unsecured') {
        return d3.rgb('#74C476').brighter(1);
      }
      if (x === 'Loans and facilities - Partially secured') {
        return d3.rgb('#74C476');
      }
      return d3.rgb('#193B79').brighter(index / 2);
    };
  };

  viz.legend = function(container, elements, colorFunction, trim) {
    var ul;
    if (trim == null) {
      trim = -1;
    }
    ul = container.append("ul").attr('class', 'legend');
    return ul.selectAll('li').data(elements).enter().append('li').attr("class", function(d) {
      return "hoverable hover-" + viz.text_to_css_class(d);
    }).text(function(d) {
      return viz.trim(d, trim);
    }).append('div').attr('class', 'swatch').style('background-color', colorFunction);
  };

}).call(this);
