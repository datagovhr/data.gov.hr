! function() {		
    var a = this,
        b = a._,
        c = {}, d = Array.prototype,
        e = Object.prototype,
        f = Function.prototype,
        g = d.slice,
        h = d.unshift,
        i = e.toString,
        j = e.hasOwnProperty,
        k = d.forEach,
        l = d.map,
        m = d.reduce,
        n = d.reduceRight,
        o = d.filter,
        p = d.every,
        q = d.some,
        r = d.indexOf,
        s = d.lastIndexOf,
        t = Array.isArray,
        u = Object.keys,
        v = f.bind,
        w = function(a) {
            return new B(a)
        };
    "undefined" != typeof module && module.exports ? (module.exports = w, w._ = w) : a._ = w, w.VERSION = "1.1.6";
    var x = w.each = w.forEach = function(a, b, d) {
        if (null != a)
            if (k && a.forEach === k) a.forEach(b, d);
            else if (w.isNumber(a.length)) {
            for (var e = 0, f = a.length; f > e; e++)
                if (b.call(d, a[e], e, a) === c) return
        } else
            for (var g in a)
                if (j.call(a, g) && b.call(d, a[g], g, a) === c) return
    };
    w.map = function(a, b, c) {
        var d = [];
        return null == a ? d : l && a.map === l ? a.map(b, c) : (x(a, function(a, e, f) {
            d[d.length] = b.call(c, a, e, f)
        }), d)
    }, w.reduce = w.foldl = w.inject = function(a, b, c, d) {
        var e = void 0 !== c;
        if (null == a && (a = []), m && a.reduce === m) return d && (b = w.bind(b, d)), e ? a.reduce(b, c) : a.reduce(b);
        if (x(a, function(a, f, g) {
            e || 0 !== f ? c = b.call(d, c, a, f, g) : (c = a, e = !0)
        }), !e) throw new TypeError("Reduce of empty array with no initial value");
        return c
    }, w.reduceRight = w.foldr = function(a, b, c, d) {
        if (null == a && (a = []), n && a.reduceRight === n) return d && (b = w.bind(b, d)), void 0 !== c ? a.reduceRight(b, c) : a.reduceRight(b);
        var e = (w.isArray(a) ? a.slice() : w.toArray(a)).reverse();
        return w.reduce(e, b, c, d)
    }, w.find = w.detect = function(a, b, c) {
        var d;
        return y(a, function(a, e, f) {
            return b.call(c, a, e, f) ? (d = a, !0) : void 0
        }), d
    }, w.filter = w.select = function(a, b, c) {
        var d = [];
        return null == a ? d : o && a.filter === o ? a.filter(b, c) : (x(a, function(a, e, f) {
            b.call(c, a, e, f) && (d[d.length] = a)
        }), d)
    }, w.reject = function(a, b, c) {
        var d = [];
        return null == a ? d : (x(a, function(a, e, f) {
            b.call(c, a, e, f) || (d[d.length] = a)
        }), d)
    }, w.every = w.all = function(a, b, d) {
        var e = !0;
        return null == a ? e : p && a.every === p ? a.every(b, d) : (x(a, function(a, f, g) {
            return (e = e && b.call(d, a, f, g)) ? void 0 : c
        }), e)
    };
    var y = w.some = w.any = function(a, b, d) {
        b || (b = w.identity);
        var e = !1;
        return null == a ? e : q && a.some === q ? a.some(b, d) : (x(a, function(a, f, g) {
            return (e = b.call(d, a, f, g)) ? c : void 0
        }), e)
    };
    w.include = w.contains = function(a, b) {
        var c = !1;
        return null == a ? c : r && a.indexOf === r ? -1 != a.indexOf(b) : (y(a, function(a) {
            return (c = a === b) ? !0 : void 0
        }), c)
    }, w.invoke = function(a, b) {
        var c = g.call(arguments, 2);
        return w.map(a, function(a) {
            return (b.call ? b || a : a[b]).apply(a, c)
        })
    }, w.pluck = function(a, b) {
        return w.map(a, function(a) {
            return a[b]
        })
    }, w.max = function(a, b, c) {
        if (!b && w.isArray(a)) return Math.max.apply(Math, a);
        var d = {
            computed: -1 / 0
        };
        return x(a, function(a, e, f) {
            var g = b ? b.call(c, a, e, f) : a;
            g >= d.computed && (d = {
                value: a,
                computed: g
            })
        }), d.value
    }, w.min = function(a, b, c) {
        if (!b && w.isArray(a)) return Math.min.apply(Math, a);
        var d = {
            computed: 1 / 0
        };
        return x(a, function(a, e, f) {
            var g = b ? b.call(c, a, e, f) : a;
            g < d.computed && (d = {
                value: a,
                computed: g
            })
        }), d.value
    }, w.sortBy = function(a, b, c) {
        return w.pluck(w.map(a, function(a, d, e) {
            return {
                value: a,
                criteria: b.call(c, a, d, e)
            }
        }).sort(function(a, b) {
            var c = a.criteria,
                d = b.criteria;
            return d > c ? -1 : c > d ? 1 : 0
        }), "value")
    }, w.sortedIndex = function(a, b, c) {
        c || (c = w.identity);
        for (var d = 0, e = a.length; e > d;) {
            var f = d + e >> 1;
            c(a[f]) < c(b) ? d = f + 1 : e = f
        }
        return d
    }, w.toArray = function(a) {
        return a ? a.toArray ? a.toArray() : w.isArray(a) ? a : w.isArguments(a) ? g.call(a) : w.values(a) : []
    }, w.size = function(a) {
        return w.toArray(a).length
    }, w.first = w.head = function(a, b, c) {
        return null == b || c ? a[0] : g.call(a, 0, b)
    }, w.rest = w.tail = function(a, b, c) {
        return g.call(a, null == b || c ? 1 : b)
    }, w.last = function(a) {
        return a[a.length - 1]
    }, w.compact = function(a) {
        return w.filter(a, function(a) {
            return !!a
        })
    }, w.flatten = function(a) {
        return w.reduce(a, function(a, b) {
            return w.isArray(b) ? a.concat(w.flatten(b)) : (a[a.length] = b, a)
        }, [])
    }, w.without = function(a) {
        var b = g.call(arguments, 1);
        return w.filter(a, function(a) {
            return !w.include(b, a)
        })
    }, w.uniq = w.unique = function(a, b) {
        return w.reduce(a, function(a, c, d) {
            return 0 != d && (b === !0 ? w.last(a) == c : w.include(a, c)) || (a[a.length] = c), a
        }, [])
    }, w.intersect = function(a) {
        var b = g.call(arguments, 1);
        return w.filter(w.uniq(a), function(a) {
            return w.every(b, function(b) {
                return w.indexOf(b, a) >= 0
            })
        })
    }, w.zip = function() {
        for (var a = g.call(arguments), b = w.max(w.pluck(a, "length")), c = new Array(b), d = 0; b > d; d++) c[d] = w.pluck(a, "" + d);
        return c
    }, w.indexOf = function(a, b, c) {
        if (null == a) return -1;
        var d, e;
        if (c) return d = w.sortedIndex(a, b), a[d] === b ? d : -1;
        if (r && a.indexOf === r) return a.indexOf(b);
        for (d = 0, e = a.length; e > d; d++)
            if (a[d] === b) return d;
        return -1
    }, w.lastIndexOf = function(a, b) {
        if (null == a) return -1;
        if (s && a.lastIndexOf === s) return a.lastIndexOf(b);
        for (var c = a.length; c--;)
            if (a[c] === b) return c;
        return -1
    }, w.range = function(a, b, c) {
        arguments.length <= 1 && (b = a || 0, a = 0), c = arguments[2] || 1;
        for (var d = Math.max(Math.ceil((b - a) / c), 0), e = 0, f = new Array(d); d > e;) f[e++] = a, a += c;
        return f
    }, w.bind = function(a, b) {
        if (a.bind === v && v) return v.apply(a, g.call(arguments, 1));
        var c = g.call(arguments, 2);
        return function() {
            return a.apply(b, c.concat(g.call(arguments)))
        }
    }, w.bindAll = function(a) {
        var b = g.call(arguments, 1);
        return 0 == b.length && (b = w.functions(a)), x(b, function(b) {
            a[b] = w.bind(a[b], a)
        }), a
    }, w.memoize = function(a, b) {
        var c = {};
        return b || (b = w.identity),
        function() {
            var d = b.apply(this, arguments);
            return j.call(c, d) ? c[d] : c[d] = a.apply(this, arguments)
        }
    }, w.delay = function(a, b) {
        var c = g.call(arguments, 2);
        return setTimeout(function() {
            return a.apply(a, c)
        }, b)
    }, w.defer = function(a) {
        return w.delay.apply(w, [a, 1].concat(g.call(arguments, 1)))
    };
    var z = function(a, b, c) {
        var d;
        return function() {
            var e = this,
                f = arguments,
                g = function() {
                    d = null, a.apply(e, f)
                };
            c && clearTimeout(d), (c || !d) && (d = setTimeout(g, b))
        }
    };
    w.throttle = function(a, b) {
        return z(a, b, !1)
    }, w.debounce = function(a, b) {
        return z(a, b, !0)
    }, w.once = function(a) {
        var b, c = !1;
        return function() {
            return c ? b : (c = !0, b = a.apply(this, arguments))
        }
    }, w.wrap = function(a, b) {
        return function() {
            var c = [a].concat(g.call(arguments));
            return b.apply(this, c)
        }
    }, w.compose = function() {
        var a = g.call(arguments);
        return function() {
            for (var b = g.call(arguments), c = a.length - 1; c >= 0; c--) b = [a[c].apply(this, b)];
            return b[0]
        }
    }, w.after = function(a, b) {
        return function() {
            return --a < 1 ? b.apply(this, arguments) : void 0
        }
    }, w.keys = u || function(a) {
        if (a !== Object(a)) throw new TypeError("Invalid object");
        var b = [];
        for (var c in a) j.call(a, c) && (b[b.length] = c);
        return b
    }, w.values = function(a) {
        return w.map(a, w.identity)
    }, w.functions = w.methods = function(a) {
        return w.filter(w.keys(a), function(b) {
            return w.isFunction(a[b])
        }).sort()
    }, w.extend = function(a) {
        return x(g.call(arguments, 1), function(b) {
            for (var c in b) void 0 !== b[c] && (a[c] = b[c])
        }), a
    }, w.defaults = function(a) {
        return x(g.call(arguments, 1), function(b) {
            for (var c in b) null == a[c] && (a[c] = b[c])
        }), a
    }, w.clone = function(a) {
        return w.isArray(a) ? a.slice() : w.extend({}, a)
    }, w.tap = function(a, b) {
        return b(a), a
    }, w.isEqual = function(a, b) {
        if (a === b) return !0;
        var c = typeof a,
            d = typeof b;
        if (c != d) return !1;
        if (a == b) return !0;
        if (!a && b || a && !b) return !1;
        if (a._chain && (a = a._wrapped), b._chain && (b = b._wrapped), a.isEqual) return a.isEqual(b);
        if (w.isDate(a) && w.isDate(b)) return a.getTime() === b.getTime();
        if (w.isNaN(a) && w.isNaN(b)) return !1;
        if (w.isRegExp(a) && w.isRegExp(b)) return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline;
        if ("object" !== c) return !1;
        if (a.length && a.length !== b.length) return !1;
        var e = w.keys(a),
            f = w.keys(b);
        if (e.length != f.length) return !1;
        for (var g in a)
            if (!(g in b && w.isEqual(a[g], b[g]))) return !1;
        return !0
    }, w.isEmpty = function(a) {
        if (w.isArray(a) || w.isString(a)) return 0 === a.length;
        for (var b in a)
            if (j.call(a, b)) return !1;
        return !0
    }, w.isElement = function(a) {
        return !(!a || 1 != a.nodeType)
    }, w.isArray = t || function(a) {
        return "[object Array]" === i.call(a)
    }, w.isArguments = function(a) {
        return !(!a || !j.call(a, "callee"))
    }, w.isFunction = function(a) {
        return !!(a && a.constructor && a.call && a.apply)
    }, w.isString = function(a) {
        return !!("" === a || a && a.charCodeAt && a.substr)
    }, w.isNumber = function(a) {
        return !!(0 === a || a && a.toExponential && a.toFixed)
    }, w.isNaN = function(a) {
        return a !== a
    }, w.isBoolean = function(a) {
        return a === !0 || a === !1
    }, w.isDate = function(a) {
        return !!(a && a.getTimezoneOffset && a.setUTCFullYear)
    }, w.isRegExp = function(a) {
        return !(!(a && a.test && a.exec) || !a.ignoreCase && a.ignoreCase !== !1)
    }, w.isNull = function(a) {
        return null === a
    }, w.isUndefined = function(a) {
        return void 0 === a
    }, w.noConflict = function() {
        return a._ = b, this
    }, w.identity = function(a) {
        return a
    }, w.times = function(a, b, c) {
        for (var d = 0; a > d; d++) b.call(c, d)
    }, w.mixin = function(a) {
        x(w.functions(a), function(b) {
            D(b, w[b] = a[b])
        })
    };
    var A = 0;
    w.uniqueId = function(a) {
        var b = A++;
        return a ? a + b : b
    }, w.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g
    }, w.template = function(a, b) {
        var c = w.templateSettings,
            d = "var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('" + a.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(c.interpolate, function(a, b) {
                return "'," + b.replace(/\\'/g, "'") + ",'"
            }).replace(c.evaluate || null, function(a, b) {
                return "');" + b.replace(/\\'/g, "'").replace(/[\r\n\t]/g, " ") + "__p.push('"
            }).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');",
            e = new Function("obj", d);
        return b ? e(b) : e
    };
    var B = function(a) {
        this._wrapped = a
    };
    w.prototype = B.prototype;
    var C = function(a, b) {
        return b ? w(a).chain() : a
    }, D = function(a, b) {
            B.prototype[a] = function() {
                var a = g.call(arguments);
                return h.call(a, this._wrapped), C(b.apply(w, a), this._chain)
            }
        };
    w.mixin(w), x(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(a) {
        var b = d[a];
        B.prototype[a] = function() {
            return b.apply(this._wrapped, arguments), C(this._wrapped, this._chain)
        }
    }), x(["concat", "join", "slice"], function(a) {
        var b = d[a];
        B.prototype[a] = function() {
            return C(b.apply(this._wrapped, arguments), this._chain)
        }
    }), B.prototype.chain = function() {
        return this._chain = !0, this
    }, B.prototype.value = function() {
        return this._wrapped
    }
}(),
function() {
    var a, b = this,
        c = b.Backbone;
    a = "undefined" != typeof exports ? exports : b.Backbone = {}, a.VERSION = "0.5.1";
    var d = b._;
    d || "undefined" == typeof require || (d = require("underscore")._);
    var e = b.jQuery || b.Zepto;
    a.noConflict = function() {
        return b.Backbone = c, this
    }, a.emulateHTTP = !1, a.emulateJSON = !1, a.Events = {
        bind: function(a, b) {
            var c = this._callbacks || (this._callbacks = {}),
                d = c[a] || (c[a] = []);
            return d.push(b), this
        },
        unbind: function(a, b) {
            var c;
            if (a) {
                if (c = this._callbacks)
                    if (b) {
                        var d = c[a];
                        if (!d) return this;
                        for (var e = 0, f = d.length; f > e; e++)
                            if (b === d[e]) {
                                d[e] = null;
                                break
                            }
                    } else c[a] = []
            } else this._callbacks = {};
            return this
        },
        trigger: function(a) {
            var b, c, d, e, f, g = 2;
            if (!(c = this._callbacks)) return this;
            for (; g--;)
                if (d = g ? a : "all", b = c[d])
                    for (var h = 0, i = b.length; i > h; h++)(e = b[h]) ? (f = g ? Array.prototype.slice.call(arguments, 1) : arguments, e.apply(this, f)) : (b.splice(h, 1), h--, i--);
            return this
        }
    }, a.Model = function(a, b) {
        var c;
        a || (a = {}), (c = this.defaults) && (d.isFunction(c) && (c = c()), a = d.extend({}, c, a)), this.attributes = {}, this._escapedAttributes = {}, this.cid = d.uniqueId("c"), this.set(a, {
            silent: !0
        }), this._changed = !1, this._previousAttributes = d.clone(this.attributes), b && b.collection && (this.collection = b.collection), this.initialize(a, b)
    }, d.extend(a.Model.prototype, a.Events, {
        _previousAttributes: null,
        _changed: !1,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function() {
            return d.clone(this.attributes)
        },
        get: function(a) {
            return this.attributes[a]
        },
        escape: function(a) {
            var b;
            if (b = this._escapedAttributes[a]) return b;
            var c = this.attributes[a];
            return this._escapedAttributes[a] = w(null == c ? "" : "" + c)
        },
        has: function(a) {
            return null != this.attributes[a]
        },
        set: function(a, b) {
            if (b || (b = {}), !a) return this;
            a.attributes && (a = a.attributes);
            var c = this.attributes,
                e = this._escapedAttributes;
            if (!b.silent && this.validate && !this._performValidation(a, b)) return !1;
            this.idAttribute in a && (this.id = a[this.idAttribute]);
            var f = this._changing;
            this._changing = !0;
            for (var g in a) {
                var h = a[g];
                d.isEqual(c[g], h) || (c[g] = h, delete e[g], this._changed = !0, b.silent || this.trigger("change:" + g, this, h, b))
            }
            return f || b.silent || !this._changed || this.change(b), this._changing = !1, this
        },
        unset: function(a, b) {
            if (!(a in this.attributes)) return this;
            b || (b = {}), this.attributes[a];
            var c = {};
            return c[a] = void 0, b.silent || !this.validate || this._performValidation(c, b) ? (delete this.attributes[a], delete this._escapedAttributes[a], a == this.idAttribute && delete this.id, this._changed = !0, b.silent || (this.trigger("change:" + a, this, void 0, b), this.change(b)), this) : !1
        },
        clear: function(a) {
            a || (a = {});
            var b, c = this.attributes,
                d = {};
            for (b in c) d[b] = void 0;
            if (!a.silent && this.validate && !this._performValidation(d, a)) return !1;
            if (this.attributes = {}, this._escapedAttributes = {}, this._changed = !0, !a.silent) {
                for (b in c) this.trigger("change:" + b, this, void 0, a);
                this.change(a)
            }
            return this
        },
        fetch: function(b) {
            b || (b = {});
            var c = this,
                d = b.success;
            return b.success = function(a, e, f) {
                return c.set(c.parse(a, f), b) ? (d && d(c, a), void 0) : !1
            }, b.error = v(b.error, c, b), (this.sync || a.sync).call(this, "read", this, b)
        },
        save: function(b, c) {
            if (c || (c = {}), b && !this.set(b, c)) return !1;
            var d = this,
                e = c.success;
            c.success = function(a, b, f) {
                return d.set(d.parse(a, f), c) ? (e && e(d, a, f), void 0) : !1
            }, c.error = v(c.error, d, c);
            var f = this.isNew() ? "create" : "update";
            return (this.sync || a.sync).call(this, f, this, c)
        },
        destroy: function(b) {
            if (b || (b = {}), this.isNew()) return this.trigger("destroy", this, this.collection, b);
            var c = this,
                d = b.success;
            return b.success = function(a) {
                c.trigger("destroy", c, c.collection, b), d && d(c, a)
            }, b.error = v(b.error, c, b), (this.sync || a.sync).call(this, "delete", this, b)
        },
        url: function() {
            var a = t(this.collection) || this.urlRoot || u();
            return this.isNew() ? a : a + ("/" == a.charAt(a.length - 1) ? "" : "/") + encodeURIComponent(this.id)
        },
        parse: function(a) {
            return a
        },
        clone: function() {
            return new this.constructor(this)
        },
        isNew: function() {
            return null == this.id
        },
        change: function(a) {
            this.trigger("change", this, a), this._previousAttributes = d.clone(this.attributes), this._changed = !1
        },
        hasChanged: function(a) {
            return a ? this._previousAttributes[a] != this.attributes[a] : this._changed
        },
        changedAttributes: function(a) {
            a || (a = this.attributes);
            var b = this._previousAttributes,
                c = !1;
            for (var e in a) d.isEqual(b[e], a[e]) || (c = c || {}, c[e] = a[e]);
            return c
        },
        previous: function(a) {
            return a && this._previousAttributes ? this._previousAttributes[a] : null
        },
        previousAttributes: function() {
            return d.clone(this._previousAttributes)
        },
        _performValidation: function(a, b) {
            var c = this.validate(a);
            return c ? (b.error ? b.error(this, c, b) : this.trigger("error", this, c, b), !1) : !0
        }
    }), a.Collection = function(a, b) {
        b || (b = {}), b.comparator && (this.comparator = b.comparator), d.bindAll(this, "_onModelEvent", "_removeReference"), this._reset(), a && this.reset(a, {
            silent: !0
        }), this.initialize.apply(this, arguments)
    }, d.extend(a.Collection.prototype, a.Events, {
        model: a.Model,
        initialize: function() {},
        toJSON: function() {
            return this.map(function(a) {
                return a.toJSON()
            })
        },
        add: function(a, b) {
            if (d.isArray(a))
                for (var c = 0, e = a.length; e > c; c++) this._add(a[c], b);
            else this._add(a, b);
            return this
        },
        remove: function(a, b) {
            if (d.isArray(a))
                for (var c = 0, e = a.length; e > c; c++) this._remove(a[c], b);
            else this._remove(a, b);
            return this
        },
        get: function(a) {
            return null == a ? null : this._byId[null != a.id ? a.id : a]
        },
        getByCid: function(a) {
            return a && this._byCid[a.cid || a]
        },
        at: function(a) {
            return this.models[a]
        },
        sort: function(a) {
            if (a || (a = {}), !this.comparator) throw new Error("Cannot sort a set without a comparator");
            return this.models = this.sortBy(this.comparator), a.silent || this.trigger("reset", this, a), this
        },
        pluck: function(a) {
            return d.map(this.models, function(b) {
                return b.get(a)
            })
        },
        reset: function(a, b) {
            return a || (a = []), b || (b = {}), this.each(this._removeReference), this._reset(), this.add(a, {
                silent: !0
            }), b.silent || this.trigger("reset", this, b), this
        },
        fetch: function(b) {
            b || (b = {});
            var c = this,
                d = b.success;
            return b.success = function(a, e, f) {
                c[b.add ? "add" : "reset"](c.parse(a, f), b), d && d(c, a)
            }, b.error = v(b.error, c, b), (this.sync || a.sync).call(this, "read", this, b)
        },
        create: function(a, b) {
            var c = this;
            if (b || (b = {}), a = this._prepareModel(a, b), !a) return !1;
            var d = b.success;
            return b.success = function(a, e, f) {
                c.add(a, b), d && d(a, e, f)
            }, a.save(null, b), a
        },
        parse: function(a) {
            return a
        },
        chain: function() {
            return d(this.models).chain()
        },
        _reset: function() {
            this.length = 0, this.models = [], this._byId = {}, this._byCid = {}
        },
        _prepareModel: function(b, c) {
            if (b instanceof a.Model) b.collection || (b.collection = this);
            else {
                var d = b;
                b = new this.model(d, {
                    collection: this
                }), b.validate && !b._performValidation(d, c) && (b = !1)
            }
            return b
        },
        _add: function(a, b) {
            if (b || (b = {}), a = this._prepareModel(a, b), !a) return !1;
            var c = this.getByCid(a) || this.get(a);
            if (c) throw new Error(["Can't add the same model to a set twice", c.id]);
            this._byId[a.id] = a, this._byCid[a.cid] = a;
            var d = null != b.at ? b.at : this.comparator ? this.sortedIndex(a, this.comparator) : this.length;
            return this.models.splice(d, 0, a), a.bind("all", this._onModelEvent), this.length++, b.silent || a.trigger("add", a, this, b), a
        },
        _remove: function(a, b) {
            return b || (b = {}), (a = this.getByCid(a) || this.get(a)) ? (delete this._byId[a.id], delete this._byCid[a.cid], this.models.splice(this.indexOf(a), 1), this.length--, b.silent || a.trigger("remove", a, this, b), this._removeReference(a), a) : null
        },
        _removeReference: function(a) {
            this == a.collection && delete a.collection, a.unbind("all", this._onModelEvent)
        },
        _onModelEvent: function(a, b, c, d) {
            ("add" != a && "remove" != a || c == this) && ("destroy" == a && this._remove(b, d), b && a === "change:" + b.idAttribute && (delete this._byId[b.previous(b.idAttribute)], this._byId[b.id] = b), this.trigger.apply(this, arguments))
        }
    });
    var f = ["forEach", "each", "map", "reduce", "reduceRight", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "sortBy", "sortedIndex", "toArray", "size", "first", "rest", "last", "without", "indexOf", "lastIndexOf", "isEmpty"];
    d.each(f, function(b) {
        a.Collection.prototype[b] = function() {
            return d[b].apply(d, [this.models].concat(d.toArray(arguments)))
        }
    }), a.Router = function(a) {
        a || (a = {}), a.routes && (this.routes = a.routes), this._bindRoutes(), this.initialize.apply(this, arguments)
    };
    var g = /:([\w\d]+)/g,
        h = /\*([\w\d]+)/g,
        i = /[-[\]{}()+?.,\\^$|#\s]/g;
    d.extend(a.Router.prototype, a.Events, {
        initialize: function() {},
        route: function(b, c, e) {
            a.history || (a.history = new a.History), d.isRegExp(b) || (b = this._routeToRegExp(b)), a.history.route(b, d.bind(function(a) {
                var d = this._extractParameters(b, a);
                e.apply(this, d), this.trigger.apply(this, ["route:" + c].concat(d))
            }, this))
        },
        navigate: function(b, c) {
            a.history.navigate(b, c)
        },
        _bindRoutes: function() {
            if (this.routes) {
                var a = [];
                for (var b in this.routes) a.unshift([b, this.routes[b]]);
                for (var c = 0, d = a.length; d > c; c++) this.route(a[c][0], a[c][1], this[a[c][1]])
            }
        },
        _routeToRegExp: function(a) {
            return a = a.replace(i, "\\$&").replace(g, "([^/]*)").replace(h, "(.*?)"), new RegExp("^" + a + "$")
        },
        _extractParameters: function(a, b) {
            return a.exec(b).slice(1)
        }
    }), a.History = function() {
        this.handlers = [], d.bindAll(this, "checkUrl")
    };
    var j = /^#*/,
        k = /msie [\w.]+/,
        l = !1;
    d.extend(a.History.prototype, {
        interval: 50,
        getFragment: function(a, b) {
            if (null == a)
                if (this._hasPushState || b) {
                    a = window.location.pathname;
                    var c = window.location.search;
                    c && (a += c), 0 == a.indexOf(this.options.root) && (a = a.substr(this.options.root.length))
                } else a = window.location.hash;
            return a.replace(j, "")
        },
        start: function(a) {
            if (l) throw new Error("Backbone.history has already been started");
            this.options = d.extend({}, {
                root: "/"
            }, this.options, a), this._wantsPushState = !! this.options.pushState, this._hasPushState = !! (this.options.pushState && window.history && window.history.pushState);
            var b = this.getFragment(),
                c = document.documentMode,
                f = k.exec(navigator.userAgent.toLowerCase()) && (!c || 7 >= c);
            f && (this.iframe = e('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow, this.navigate(b)), this._hasPushState ? e(window).bind("popstate", this.checkUrl) : "onhashchange" in window && !f ? e(window).bind("hashchange", this.checkUrl) : setInterval(this.checkUrl, this.interval), this.fragment = b, l = !0;
            var g = window.location,
                h = g.pathname == this.options.root;
            return !this._wantsPushState || this._hasPushState || h ? this._wantsPushState && this._hasPushState && h && g.hash && (this.fragment = g.hash.replace(j, ""), window.history.replaceState({}, document.title, g.protocol + "//" + g.host + this.options.root + this.fragment)) : (this.fragment = this.getFragment(null, !0), window.location.replace(this.options.root + "#" + this.fragment)), this.loadUrl()
        },
        route: function(a, b) {
            this.handlers.unshift({
                route: a,
                callback: b
            })
        },
        checkUrl: function() {
            var a = this.getFragment();
            return a == this.fragment && this.iframe && (a = this.getFragment(this.iframe.location.hash)), a == this.fragment || a == decodeURIComponent(this.fragment) ? !1 : (this.iframe && this.navigate(a), this.loadUrl() || this.loadUrl(window.location.hash), void 0)
        },
        loadUrl: function(a) {
            var b = this.fragment = this.getFragment(a),
                c = d.any(this.handlers, function(a) {
                    return a.route.test(b) ? (a.callback(b), !0) : void 0
                });
            return c
        },
        navigate: function(a, b) {
            var c = (a || "").replace(j, "");
            if (this.fragment != c && this.fragment != decodeURIComponent(c)) {
                if (this._hasPushState) {
                    var d = window.location;
                    0 != c.indexOf(this.options.root) && (c = this.options.root + c), this.fragment = c, window.history.pushState({}, document.title, d.protocol + "//" + d.host + c)
                } else window.location.hash = this.fragment = c, this.iframe && c != this.getFragment(this.iframe.location.hash) && (this.iframe.document.open().close(), this.iframe.location.hash = c);
                b && this.loadUrl(a)
            }
        }
    }), a.View = function(a) {
        this.cid = d.uniqueId("view"), this._configure(a || {}), this._ensureElement(), this.delegateEvents(), this.initialize.apply(this, arguments)
    };
    var m = function(a) {
        return e(a, this.el)
    }, n = /^(\S+)\s*(.*)$/,
        o = ["model", "collection", "el", "id", "attributes", "className", "tagName"];
    d.extend(a.View.prototype, a.Events, {
        tagName: "div",
        $: m,
        initialize: function() {},
        render: function() {
            return this
        },
        remove: function() {
            return e(this.el).remove(), this
        },
        make: function(a, b, c) {
            var d = document.createElement(a);
            return b && e(d).attr(b), c && e(d).html(c), d
        },
        delegateEvents: function(a) {
            if (a || (a = this.events)) {
                e(this.el).unbind(".delegateEvents" + this.cid);
                for (var b in a) {
                    var c = this[a[b]];
                    if (!c) throw new Error('Event "' + a[b] + '" does not exist');
                    var f = b.match(n),
                        g = f[1],
                        h = f[2];
                    c = d.bind(c, this), g += ".delegateEvents" + this.cid, "" === h ? e(this.el).bind(g, c) : e(this.el).delegate(h, g, c)
                }
            }
        },
        _configure: function(a) {
            this.options && (a = d.extend({}, this.options, a));
            for (var b = 0, c = o.length; c > b; b++) {
                var e = o[b];
                a[e] && (this[e] = a[e])
            }
            this.options = a
        },
        _ensureElement: function() {
            if (this.el) d.isString(this.el) && (this.el = e(this.el).get(0));
            else {
                var a = this.attributes || {};
                this.id && (a.id = this.id), this.className && (a["class"] = this.className), this.el = this.make(this.tagName, a)
            }
        }
    });
    var p = function(a, b) {
        var c = s(this, a, b);
        return c.extend = this.extend, c
    };
    a.Model.extend = a.Collection.extend = a.Router.extend = a.View.extend = p;
    var q = {
        create: "POST",
        update: "PUT",
        "delete": "DELETE",
        read: "GET"
    };
    a.sync = function(b, c, f) {
        var g = q[b],
            h = d.extend({
                type: g,
                dataType: "json",
                processData: !1
            }, f);
        return h.url || (h.url = t(c) || u()), h.data || !c || "create" != b && "update" != b || (h.contentType = "application/json", h.data = JSON.stringify(c.toJSON())), a.emulateJSON && (h.contentType = "application/x-www-form-urlencoded", h.processData = !0, h.data = h.data ? {
            model: h.data
        } : {}), a.emulateHTTP && ("PUT" === g || "DELETE" === g) && (a.emulateJSON && (h.data._method = g), h.type = "POST", h.beforeSend = function(a) {
            a.setRequestHeader("X-HTTP-Method-Override", g)
        }), e.ajax(h)
    };
    var r = function() {}, s = function(a, b, c) {
            var e;
            return e = b && b.hasOwnProperty("constructor") ? b.constructor : function() {
                return a.apply(this, arguments)
            }, d.extend(e, a), r.prototype = a.prototype, e.prototype = new r, b && d.extend(e.prototype, b), c && d.extend(e, c), e.prototype.constructor = e, e.__super__ = a.prototype, e
        }, t = function(a) {
            return a && a.url ? d.isFunction(a.url) ? a.url() : a.url : null
        }, u = function() {
            throw new Error('A "url" property or function must be specified')
        }, v = function(a, b, c) {
            return function(d) {
                a ? a(b, d, c) : b.trigger("error", b, d, c)
            }
        }, w = function(a) {
            return a.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27").replace(/\//g, "&#x2F;")
        }
}.call(this),
function(a) {
    var b = function() {
        var a = function() {};
        return a.prototype = {
            otag: "{{",
            ctag: "}}",
            pragmas: {},
            buffer: [],
            pragmas_implemented: {
                "IMPLICIT-ITERATOR": !0
            },
            context: {},
            render: function(a, b, c, d) {
                if (d || (this.context = b, this.buffer = []), !this.includes("", a)) return d ? a : (this.send(a), void 0);
                a = this.render_pragmas(a);
                var e = this.render_section(a, b, c);
                return d ? this.render_tags(e, b, c, d) : (this.render_tags(e, b, c, d), void 0)
            },
            send: function(a) {
                "" != a && this.buffer.push(a)
            },
            render_pragmas: function(a) {
                if (!this.includes("%", a)) return a;
                var b = this,
                    c = new RegExp(this.otag + "%([\\w-]+) ?([\\w]+=[\\w]+)?" + this.ctag);
                return a.replace(c, function(a, c, d) {
                    if (!b.pragmas_implemented[c]) throw {
                        message: "This implementation of mustache doesn't understand the '" + c + "' pragma"
                    };
                    if (b.pragmas[c] = {}, d) {
                        var e = d.split("=");
                        b.pragmas[c][e[0]] = e[1]
                    }
                    return ""
                })
            },
            render_partial: function(a, b, c) {
                if (a = this.trim(a), !c || void 0 === c[a]) throw {
                    message: "unknown_partial '" + a + "'"
                };
                return "object" != typeof b[a] ? this.render(c[a], b, c, !0) : this.render(c[a], b[a], c, !0)
            },
            render_section: function(a, b, c) {
                if (!this.includes("#", a) && !this.includes("^", a)) return a;
                var d = this,
                    e = new RegExp(this.otag + "(\\^|\\#)\\s*(.+)\\s*" + this.ctag + "\n*([\\s\\S]+?)" + this.otag + "\\/\\s*\\2\\s*" + this.ctag + "\\s*", "mg");
                return a.replace(e, function(a, e, f, g) {
                    var h = d.find(f, b);
                    return "^" == e ? !h || d.is_array(h) && 0 === h.length ? d.render(g, b, c, !0) : "" : "#" == e ? d.is_array(h) ? d.map(h, function(a) {
                        return d.render(g, d.create_context(a), c, !0)
                    }).join("") : d.is_object(h) ? d.render(g, d.create_context(h), c, !0) : "function" == typeof h ? h.call(b, g, function(a) {
                        return d.render(a, b, c, !0)
                    }) : h ? d.render(g, b, c, !0) : "" : void 0
                })
            },
            render_tags: function(a, b, c, d) {
                for (var e = this, f = function() {
                        return new RegExp(e.otag + "(=|!|>|\\{|%)?([^\\/#\\^]+?)\\1?" + e.ctag + "+", "g")
                    }, g = f(), h = function(a, d, h) {
                        switch (d) {
                            case "!":
                                return "";
                            case "=":
                                return e.set_delimiters(h), g = f(), "";
                            case ">":
                                return e.render_partial(h, b, c);
                            case "{":
                                return e.find(h, b);
                            default:
                                return e.escape(e.find(h, b))
                        }
                    }, i = a.split("\n"), j = 0; j < i.length; j++) i[j] = i[j].replace(g, h, this), d || this.send(i[j]);
                return d ? i.join("\n") : void 0
            },
            set_delimiters: function(a) {
                var b = a.split(" ");
                this.otag = this.escape_regex(b[0]), this.ctag = this.escape_regex(b[1])
            },
            escape_regex: function(a) {
                if (!arguments.callee.sRE) {
                    var b = ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\"];
                    arguments.callee.sRE = new RegExp("(\\" + b.join("|\\") + ")", "g")
                }
                return a.replace(arguments.callee.sRE, "\\$1")
            },
            find: function(a, b) {
                function c(a) {
                    return a === !1 || 0 === a || a
                }
                a = this.trim(a);
                var d;
                return c(b[a]) ? d = b[a] : c(this.context[a]) && (d = this.context[a]), "function" == typeof d ? d.apply(b) : void 0 !== d ? d : ""
            },
            includes: function(a, b) {
                return -1 != b.indexOf(this.otag + a)
            },
            escape: function(a) {
                return a = String(null === a ? "" : a), a.replace(/&(?!\w+;)|["<>\\]/g, function(a) {
                    switch (a) {
                        case "&":
                            return "&amp;";
                        case "\\":
                            return "\\\\";
                        case '"':
                            return '"';
                        case "<":
                            return "&lt;";
                        case ">":
                            return "&gt;";
                        default:
                            return a
                    }
                })
            },
            create_context: function(a) {
                if (this.is_object(a)) return a;
                var b = ".";
                this.pragmas["IMPLICIT-ITERATOR"] && (b = this.pragmas["IMPLICIT-ITERATOR"].iterator);
                var c = {};
                return c[b] = a, c
            },
            is_object: function(a) {
                return a && "object" == typeof a
            },
            is_array: function(a) {
                return "[object Array]" === Object.prototype.toString.call(a)
            },
            trim: function(a) {
                return a.replace(/^\s*|\s*$/g, "")
            },
            map: function(a, b) {
                if ("function" == typeof a.map) return a.map(b);
                for (var c = [], d = a.length, e = 0; d > e; e++) c.push(b(a[e]));
                return c
            }
        }, {
            name: "mustache.js",
            version: "0.3.1-dev",
            to_html: function(b, c, d, e) {
                var f = new a;
                return e && (f.send = e), f.render(b, c, d), e ? void 0 : f.buffer.join("\n")
            },
            escape: function(b) {
                return (new a).escape(b)
            }
        }
    }();
    a.mustache = function(a, c, d) {
        return b.to_html(a, c, d)
    }, a.mustache.escape = function(a) {
        return b.escape(a)
    }
}(jQuery),
function(a) {
    a.color = {}, a.color.make = function(b, c, d, e) {
        var f = {};
        return f.r = b || 0, f.g = c || 0, f.b = d || 0, f.a = null != e ? e : 1, f.add = function(a, b) {
            for (var c = 0; c < a.length; ++c) f[a.charAt(c)] += b;
            return f.normalize()
        }, f.scale = function(a, b) {
            for (var c = 0; c < a.length; ++c) f[a.charAt(c)] *= b;
            return f.normalize()
        }, f.toString = function() {
            return f.a >= 1 ? "rgb(" + [f.r, f.g, f.b].join(",") + ")" : "rgba(" + [f.r, f.g, f.b, f.a].join(",") + ")"
        }, f.normalize = function() {
            function a(a, b, c) {
                return a > b ? a : b > c ? c : b
            }
            return f.r = a(0, parseInt(f.r), 255), f.g = a(0, parseInt(f.g), 255), f.b = a(0, parseInt(f.b), 255), f.a = a(0, f.a, 1), f
        }, f.clone = function() {
            return a.color.make(f.r, f.b, f.g, f.a)
        }, f.normalize()
    }, a.color.extract = function(b, c) {
        var d;
        do {
            if (d = b.css(c).toLowerCase(), "" != d && "transparent" != d) break;
            b = b.parent()
        } while (!a.nodeName(b.get(0), "body"));
        return "rgba(0, 0, 0, 0)" == d && (d = "transparent"), a.color.parse(d)
    }, a.color.parse = function(c) {
        var d, e = a.color.make;
        if (d = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(c)) return e(parseInt(d[1], 10), parseInt(d[2], 10), parseInt(d[3], 10));
        if (d = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(c)) return e(parseInt(d[1], 10), parseInt(d[2], 10), parseInt(d[3], 10), parseFloat(d[4]));
        if (d = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(c)) return e(2.55 * parseFloat(d[1]), 2.55 * parseFloat(d[2]), 2.55 * parseFloat(d[3]));
        if (d = /rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(c)) return e(2.55 * parseFloat(d[1]), 2.55 * parseFloat(d[2]), 2.55 * parseFloat(d[3]), parseFloat(d[4]));
        if (d = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(c)) return e(parseInt(d[1], 16), parseInt(d[2], 16), parseInt(d[3], 16));
        if (d = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(c)) return e(parseInt(d[1] + d[1], 16), parseInt(d[2] + d[2], 16), parseInt(d[3] + d[3], 16));
        var f = a.trim(c).toLowerCase();
        return "transparent" == f ? e(255, 255, 255, 0) : (d = b[f] || [0, 0, 0], e(d[0], d[1], d[2]))
    };
    var b = {
        aqua: [0, 255, 255],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        black: [0, 0, 0],
        blue: [0, 0, 255],
        brown: [165, 42, 42],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgrey: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkviolet: [148, 0, 211],
        fuchsia: [255, 0, 255],
        gold: [255, 215, 0],
        green: [0, 128, 0],
        indigo: [75, 0, 130],
        khaki: [240, 230, 140],
        lightblue: [173, 216, 230],
        lightcyan: [224, 255, 255],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        navy: [0, 0, 128],
        olive: [128, 128, 0],
        orange: [255, 165, 0],
        pink: [255, 192, 203],
        purple: [128, 0, 128],
        violet: [128, 0, 128],
        red: [255, 0, 0],
        silver: [192, 192, 192],
        white: [255, 255, 255],
        yellow: [255, 255, 0]
    }
}(jQuery),
function(a) {
    function b(b, d, e, f) {
        function g(a, b) {
            b = [ub].concat(b);
            for (var c = 0; c < a.length; ++c) a[c].apply(this, b)
        }

        function h() {
            for (var b = 0; b < f.length; ++b) {
                var c = f[b];
                c.init(ub), c.options && a.extend(!0, gb, c.options)
            }
        }

        function j(b) {
            var c;
            for (a.extend(!0, gb, b), null == gb.xaxis.color && (gb.xaxis.color = gb.grid.color), null == gb.yaxis.color && (gb.yaxis.color = gb.grid.color), null == gb.xaxis.tickColor && (gb.xaxis.tickColor = gb.grid.tickColor), null == gb.yaxis.tickColor && (gb.yaxis.tickColor = gb.grid.tickColor), null == gb.grid.borderColor && (gb.grid.borderColor = gb.grid.color), null == gb.grid.tickColor && (gb.grid.tickColor = a.color.parse(gb.grid.color).scale("a", .22).toString()), c = 0; c < Math.max(1, gb.xaxes.length); ++c) gb.xaxes[c] = a.extend(!0, {}, gb.xaxis, gb.xaxes[c]);
            for (c = 0; c < Math.max(1, gb.yaxes.length); ++c) gb.yaxes[c] = a.extend(!0, {}, gb.yaxis, gb.yaxes[c]);
            for (gb.xaxis.noTicks && null == gb.xaxis.ticks && (gb.xaxis.ticks = gb.xaxis.noTicks), gb.yaxis.noTicks && null == gb.yaxis.ticks && (gb.yaxis.ticks = gb.yaxis.noTicks), gb.x2axis && (gb.xaxes[1] = a.extend(!0, {}, gb.xaxis, gb.x2axis), gb.xaxes[1].position = "top"), gb.y2axis && (gb.yaxes[1] = a.extend(!0, {}, gb.yaxis, gb.y2axis), gb.yaxes[1].position = "right"), gb.grid.coloredAreas && (gb.grid.markings = gb.grid.coloredAreas), gb.grid.coloredAreasColor && (gb.grid.markingsColor = gb.grid.coloredAreasColor), gb.lines && a.extend(!0, gb.series.lines, gb.lines), gb.points && a.extend(!0, gb.series.points, gb.points), gb.bars && a.extend(!0, gb.series.bars, gb.bars), null != gb.shadowSize && (gb.series.shadowSize = gb.shadowSize), c = 0; c < gb.xaxes.length; ++c) q(mb, c + 1).options = gb.xaxes[c];
            for (c = 0; c < gb.yaxes.length; ++c) q(nb, c + 1).options = gb.yaxes[c];
            for (var d in tb) gb.hooks[d] && gb.hooks[d].length && (tb[d] = tb[d].concat(gb.hooks[d]));
            g(tb.processOptions, [gb])
        }

        function k(a) {
            fb = l(a), r(), s()
        }

        function l(b) {
            for (var c = [], d = 0; d < b.length; ++d) {
                var e = a.extend(!0, {}, gb.series);
                null != b[d].data ? (e.data = b[d].data, delete b[d].data, a.extend(!0, e, b[d]), b[d].data = e.data) : e.data = b[d], c.push(e)
            }
            return c
        }

        function m(a, b) {
            var c = a[b + "axis"];
            return "object" == typeof c && (c = c.n), "number" != typeof c && (c = 1), c
        }

        function n() {
            return a.grep(mb.concat(nb), function(a) {
                return a
            })
        }

        function o(a) {
            var b, c, d = {};
            for (b = 0; b < mb.length; ++b) c = mb[b], c && c.used && (d["x" + c.n] = c.c2p(a.left));
            for (b = 0; b < nb.length; ++b) c = nb[b], c && c.used && (d["y" + c.n] = c.c2p(a.top));
            return void 0 !== d.x1 && (d.x = d.x1), void 0 !== d.y1 && (d.y = d.y1), d
        }

        function p(a) {
            var b, c, d, e = {};
            for (b = 0; b < mb.length; ++b)
                if (c = mb[b], c && c.used && (d = "x" + c.n, null == a[d] && 1 == c.n && (d = "x"), null != a[d])) {
                    e.left = c.p2c(a[d]);
                    break
                }
            for (b = 0; b < nb.length; ++b)
                if (c = nb[b], c && c.used && (d = "y" + c.n, null == a[d] && 1 == c.n && (d = "y"), null != a[d])) {
                    e.top = c.p2c(a[d]);
                    break
                }
            return e
        }

        function q(b, c) {
            return b[c - 1] || (b[c - 1] = {
                n: c,
                direction: b == mb ? "x" : "y",
                options: a.extend(!0, {}, b == mb ? gb.xaxis : gb.yaxis)
            }), b[c - 1]
        }

        function r() {
            var b, c = fb.length,
                d = [],
                e = [];
            for (b = 0; b < fb.length; ++b) {
                var f = fb[b].color;
                null != f && (--c, "number" == typeof f ? e.push(f) : d.push(a.color.parse(fb[b].color)))
            }
            for (b = 0; b < e.length; ++b) c = Math.max(c, e[b] + 1);
            var g = [],
                h = 0;
            for (b = 0; g.length < c;) {
                var i;
                i = gb.colors.length == b ? a.color.make(100, 100, 100) : a.color.parse(gb.colors[b]);
                var j = 1 == h % 2 ? -1 : 1;
                i.scale("rgb", 1 + .2 * j * Math.ceil(h / 2)), g.push(i), ++b, b >= gb.colors.length && (b = 0, ++h)
            }
            var k, l = 0;
            for (b = 0; b < fb.length; ++b) {
                if (k = fb[b], null == k.color ? (k.color = g[l].toString(), ++l) : "number" == typeof k.color && (k.color = g[k.color].toString()), null == k.lines.show) {
                    var n, o = !0;
                    for (n in k)
                        if (k[n] && k[n].show) {
                            o = !1;
                            break
                        }
                    o && (k.lines.show = !0)
                }
                k.xaxis = q(mb, m(k, "x")), k.yaxis = q(nb, m(k, "y"))
            }
        }

        function s() {
            function b(a, b, c) {
                b < a.datamin && b != -q && (a.datamin = b), c > a.datamax && c != q && (a.datamax = c)
            }
            var c, d, e, f, h, i, j, k, l, m, o = Number.POSITIVE_INFINITY,
                p = Number.NEGATIVE_INFINITY,
                q = Number.MAX_VALUE;
            for (a.each(n(), function(a, b) {
                b.datamin = o, b.datamax = p, b.used = !1
            }), c = 0; c < fb.length; ++c) h = fb[c], h.datapoints = {
                points: []
            }, g(tb.processRawData, [h, h.data, h.datapoints]);
            for (c = 0; c < fb.length; ++c) {
                h = fb[c];
                var r = h.data,
                    s = h.datapoints.format;
                if (s || (s = [], s.push({
                    x: !0,
                    number: !0,
                    required: !0
                }), s.push({
                    y: !0,
                    number: !0,
                    required: !0
                }), (h.bars.show || h.lines.show && h.lines.fill) && (s.push({
                    y: !0,
                    number: !0,
                    required: !1,
                    defaultValue: 0
                }), h.bars.horizontal && (delete s[s.length - 1].y, s[s.length - 1].x = !0)), h.datapoints.format = s), null == h.datapoints.pointsize)
                    for (h.datapoints.pointsize = s.length, j = h.datapoints.pointsize, i = h.datapoints.points, insertSteps = h.lines.show && h.lines.steps, h.xaxis.used = h.yaxis.used = !0, d = e = 0; d < r.length; ++d, e += j) {
                        m = r[d];
                        var t = null == m;
                        if (!t)
                            for (f = 0; j > f; ++f) k = m[f], l = s[f], l && (l.number && null != k && (k = +k, isNaN(k) ? k = null : 1 / 0 == k ? k = q : k == -1 / 0 && (k = -q)), null == k && (l.required && (t = !0), null != l.defaultValue && (k = l.defaultValue))), i[e + f] = k;
                        if (t)
                            for (f = 0; j > f; ++f) k = i[e + f], null != k && (l = s[f], l.x && b(h.xaxis, k, k), l.y && b(h.yaxis, k, k)), i[e + f] = null;
                        else if (insertSteps && e > 0 && null != i[e - j] && i[e - j] != i[e] && i[e - j + 1] != i[e + 1]) {
                            for (f = 0; j > f; ++f) i[e + j + f] = i[e + f];
                            i[e + 1] = i[e - j + 1], e += j
                        }
                    }
            }
            for (c = 0; c < fb.length; ++c) h = fb[c], g(tb.processDatapoints, [h, h.datapoints]);
            for (c = 0; c < fb.length; ++c) {
                h = fb[c], i = h.datapoints.points, j = h.datapoints.pointsize;
                var u = o,
                    v = o,
                    w = p,
                    x = p;
                for (d = 0; d < i.length; d += j)
                    if (null != i[d])
                        for (f = 0; j > f; ++f) k = i[d + f], l = s[f], l && k != q && k != -q && (l.x && (u > k && (u = k), k > w && (w = k)), l.y && (v > k && (v = k), k > x && (x = k)));
                if (h.bars.show) {
                    var y = "left" == h.bars.align ? 0 : -h.bars.barWidth / 2;
                    h.bars.horizontal ? (v += y, x += y + h.bars.barWidth) : (u += y, w += y + h.bars.barWidth)
                }
                b(h.xaxis, u, w), b(h.yaxis, v, x)
            }
            a.each(n(), function(a, b) {
                b.datamin == o && (b.datamin = null), b.datamax == p && (b.datamax = null)
            })
        }

        function t(c, d) {
            var e = document.createElement("canvas");
            return e.className = d, e.width = pb, e.height = qb, c || a(e).css({
                position: "absolute",
                left: 0,
                top: 0
            }), a(e).appendTo(b), e.getContext || (e = window.G_vmlCanvasManager.initElement(e)), e.getContext("2d").save(), e
        }

        function u() {
            if (pb = b.width(), qb = b.height(), 0 >= pb || 0 >= qb) throw "Invalid dimensions for plot, width = " + pb + ", height = " + qb
        }

        function v(a) {
            a.width != pb && (a.width = pb), a.height != qb && (a.height = qb);
            var b = a.getContext("2d");
            b.restore(), b.save()
        }

        function w() {
            var c, d = b.children("canvas.base"),
                e = b.children("canvas.overlay");
            0 == d.length || 0 == e ? (b.html(""), b.css({
                padding: 0
            }), "static" == b.css("position") && b.css("position", "relative"), u(), hb = t(!0, "base"), ib = t(!1, "overlay"), c = !1) : (hb = d.get(0), ib = e.get(0), c = !0), kb = hb.getContext("2d"), lb = ib.getContext("2d"), jb = a([ib, hb]), c && (b.data("plot").shutdown(), ub.resize(), lb.clearRect(0, 0, pb, qb), jb.unbind(), b.children().not([hb, ib]).remove()), b.data("plot", ub)
        }

        function x() {
            gb.grid.hoverable && (jb.mousemove(V), jb.mouseleave(W)), gb.grid.clickable && jb.click(X), g(tb.bindEvents, [jb])
        }

        function y() {
            wb && clearTimeout(wb), jb.unbind("mousemove", V), jb.unbind("mouseleave", W), jb.unbind("click", X), g(tb.shutdown, [jb])
        }

        function z(a) {
            function b(a) {
                return a
            }
            var c, d, e = a.options.transform || b,
                f = a.options.inverseTransform;
            "x" == a.direction ? (c = a.scale = rb / Math.abs(e(a.max) - e(a.min)), d = Math.min(e(a.max), e(a.min))) : (c = a.scale = sb / Math.abs(e(a.max) - e(a.min)), c = -c, d = Math.max(e(a.max), e(a.min))), a.p2c = e == b ? function(a) {
                return (a - d) * c
            } : function(a) {
                return (e(a) - d) * c
            }, a.c2p = f ? function(a) {
                return f(d + a / c)
            } : function(a) {
                return d + a / c
            }
        }

        function A(c) {
            function d(d, e) {
                return a('<div style="position:absolute;top:-10000px;' + e + 'font-size:smaller">' + '<div class="' + c.direction + "Axis " + c.direction + c.n + 'Axis">' + d.join("") + "</div></div>").appendTo(b)
            }
            var e, f, g, h = c.options,
                i = c.ticks || [],
                j = [],
                k = h.labelWidth,
                l = h.labelHeight;
            if ("x" == c.direction) {
                if (null == k && (k = Math.floor(pb / (i.length > 0 ? i.length : 1))), null == l) {
                    for (j = [], e = 0; e < i.length; ++e) f = i[e].label, f && j.push('<div class="tickLabel" style="float:left;width:' + k + 'px">' + f + "</div>");
                    j.length > 0 && (j.push('<div style="clear:left"></div>'), g = d(j, "width:10000px;"), l = g.height(), g.remove())
                }
            } else if (null == k || null == l) {
                for (e = 0; e < i.length; ++e) f = i[e].label, f && j.push('<div class="tickLabel">' + f + "</div>");
                j.length > 0 && (g = d(j, ""), null == k && (k = g.children().width()), null == l && (l = g.find("div.tickLabel").height()), g.remove())
            }
            null == k && (k = 0), null == l && (l = 0), c.labelWidth = k, c.labelHeight = l
        }

        function B(b) {
            var c = b.labelWidth,
                d = b.labelHeight,
                e = b.options.position,
                f = b.options.tickLength,
                g = gb.grid.axisMargin,
                h = gb.grid.labelMargin,
                i = "x" == b.direction ? mb : nb,
                j = a.grep(i, function(a) {
                    return a && a.options.position == e && a.reserveSpace
                });
            a.inArray(b, j) == j.length - 1 && (g = 0), null == f && (f = "full");
            var k = a.grep(i, function(a) {
                return a && a.reserveSpace
            }),
                l = 0 == a.inArray(b, k);
            l || "full" != f || (f = 5), isNaN(+f) || (h += +f), "x" == b.direction ? (d += h, "bottom" == e ? (ob.bottom += d + g, b.box = {
                top: qb - ob.bottom,
                height: d
            }) : (b.box = {
                top: ob.top + g,
                height: d
            }, ob.top += d + g)) : (c += h, "left" == e ? (b.box = {
                left: ob.left + g,
                width: c
            }, ob.left += c + g) : (ob.right += c + g, b.box = {
                left: pb - ob.right,
                width: c
            })), b.position = e, b.tickLength = f, b.box.padding = h, b.innermost = l
        }

        function C(a) {
            "x" == a.direction ? (a.box.left = ob.left, a.box.width = rb) : (a.box.top = ob.top, a.box.height = sb)
        }

        function D() {
            var b, c = n();
            if (a.each(c, function(a, b) {
                b.show = b.options.show, null == b.show && (b.show = b.used), b.reserveSpace = b.show || b.options.reserveSpace, E(b)
            }), allocatedAxes = a.grep(c, function(a) {
                return a.reserveSpace
            }), ob.left = ob.right = ob.top = ob.bottom = 0, gb.grid.show) {
                for (a.each(allocatedAxes, function(a, b) {
                    F(b), G(b), H(b, b.ticks), A(b)
                }), b = allocatedAxes.length - 1; b >= 0; --b) B(allocatedAxes[b]);
                var d = gb.grid.minBorderMargin;
                if (null == d)
                    for (d = 0, b = 0; b < fb.length; ++b) d = Math.max(d, fb[b].points.radius + fb[b].points.lineWidth / 2);
                for (var e in ob) ob[e] += gb.grid.borderWidth, ob[e] = Math.max(d, ob[e])
            }
            rb = pb - ob.left - ob.right, sb = qb - ob.bottom - ob.top, a.each(c, function(a, b) {
                z(b)
            }), gb.grid.show && (a.each(allocatedAxes, function(a, b) {
                C(b)
            }), M()), T()
        }

        function E(a) {
            var b = a.options,
                c = +(null != b.min ? b.min : a.datamin),
                d = +(null != b.max ? b.max : a.datamax),
                e = d - c;
            if (0 == e) {
                var f = 0 == d ? 1 : .01;
                null == b.min && (c -= f), (null == b.max || null != b.min) && (d += f)
            } else {
                var g = b.autoscaleMargin;
                null != g && (null == b.min && (c -= e * g, 0 > c && null != a.datamin && a.datamin >= 0 && (c = 0)), null == b.max && (d += e * g, d > 0 && null != a.datamax && a.datamax <= 0 && (d = 0)))
            }
            a.min = c, a.max = d
        }

        function F(b) {
            var d, e = b.options;
            d = "number" == typeof e.ticks && e.ticks > 0 ? e.ticks : .3 * Math.sqrt("x" == b.direction ? pb : qb);
            var f, g, h, i, j, k, l, m = (b.max - b.min) / d;
            if ("time" == e.mode) {
                var n = {
                    second: 1e3,
                    minute: 6e4,
                    hour: 36e5,
                    day: 864e5,
                    month: 2592e6,
                    year: 1e3 * 525949.2 * 60
                }, o = [
                        [1, "second"],
                        [2, "second"],
                        [5, "second"],
                        [10, "second"],
                        [30, "second"],
                        [1, "minute"],
                        [2, "minute"],
                        [5, "minute"],
                        [10, "minute"],
                        [30, "minute"],
                        [1, "hour"],
                        [2, "hour"],
                        [4, "hour"],
                        [8, "hour"],
                        [12, "hour"],
                        [1, "day"],
                        [2, "day"],
                        [3, "day"],
                        [.25, "month"],
                        [.5, "month"],
                        [1, "month"],
                        [2, "month"],
                        [3, "month"],
                        [6, "month"],
                        [1, "year"]
                    ],
                    p = 0;
                null != e.minTickSize && (p = "number" == typeof e.tickSize ? e.tickSize : e.minTickSize[0] * n[e.minTickSize[1]]);
                for (var j = 0; j < o.length - 1 && !(m < (o[j][0] * n[o[j][1]] + o[j + 1][0] * n[o[j + 1][1]]) / 2 && o[j][0] * n[o[j][1]] >= p); ++j);
                f = o[j][0], h = o[j][1], "year" == h && (k = Math.pow(10, Math.floor(Math.log(m / n.year) / Math.LN10)), l = m / n.year / k, f = 1.5 > l ? 1 : 3 > l ? 2 : 7.5 > l ? 5 : 10, f *= k), b.tickSize = e.tickSize || [f, h], g = function(a) {
                    var b = [],
                        d = a.tickSize[0],
                        e = a.tickSize[1],
                        f = new Date(a.min),
                        g = d * n[e];
                    "second" == e && f.setUTCSeconds(c(f.getUTCSeconds(), d)), "minute" == e && f.setUTCMinutes(c(f.getUTCMinutes(), d)), "hour" == e && f.setUTCHours(c(f.getUTCHours(), d)), "month" == e && f.setUTCMonth(c(f.getUTCMonth(), d)), "year" == e && f.setUTCFullYear(c(f.getUTCFullYear(), d)), f.setUTCMilliseconds(0), g >= n.minute && f.setUTCSeconds(0), g >= n.hour && f.setUTCMinutes(0), g >= n.day && f.setUTCHours(0), g >= 4 * n.day && f.setUTCDate(1), g >= n.year && f.setUTCMonth(0);
                    var h, i = 0,
                        j = Number.NaN;
                    do
                        if (h = j, j = f.getTime(), b.push(j), "month" == e)
                            if (1 > d) {
                                f.setUTCDate(1);
                                var k = f.getTime();
                                f.setUTCMonth(f.getUTCMonth() + 1);
                                var l = f.getTime();
                                f.setTime(j + i * n.hour + (l - k) * d), i = f.getUTCHours(), f.setUTCHours(0)
                            } else f.setUTCMonth(f.getUTCMonth() + d);
                            else "year" == e ? f.setUTCFullYear(f.getUTCFullYear() + d) : f.setTime(j + g); while (j < a.max && j != h);
                    return b
                }, i = function(b, c) {
                    var d = new Date(b);
                    if (null != e.timeformat) return a.plot.formatDate(d, e.timeformat, e.monthNames);
                    var f = c.tickSize[0] * n[c.tickSize[1]],
                        g = c.max - c.min,
                        h = e.twelveHourClock ? " %p" : "";
                    return fmt = f < n.minute ? "%h:%M:%S" + h : f < n.day ? g < 2 * n.day ? "%h:%M" + h : "%b %d %h:%M" + h : f < n.month ? "%b %d" : f < n.year ? g < n.year ? "%b" : "%b %y" : "%y", a.plot.formatDate(d, fmt, e.monthNames)
                }
            } else {
                var q = e.tickDecimals,
                    r = -Math.floor(Math.log(m) / Math.LN10);
                null != q && r > q && (r = q), k = Math.pow(10, -r), l = m / k, 1.5 > l ? f = 1 : 3 > l ? (f = 2, l > 2.25 && (null == q || q >= r + 1) && (f = 2.5, ++r)) : f = 7.5 > l ? 5 : 10, f *= k, null != e.minTickSize && f < e.minTickSize && (f = e.minTickSize), b.tickDecimals = Math.max(0, null != q ? q : r), b.tickSize = e.tickSize || f, g = function(a) {
                    var b, d = [],
                        e = c(a.min, a.tickSize),
                        f = 0,
                        g = Number.NaN;
                    do b = g, g = e + f * a.tickSize, d.push(g), ++f; while (g < a.max && g != b);
                    return d
                }, i = function(a, b) {
                    return a.toFixed(b.tickDecimals)
                }
            } if (null != e.alignTicksWithAxis) {
                var s = ("x" == b.direction ? mb : nb)[e.alignTicksWithAxis - 1];
                if (s && s.used && s != b) {
                    var t = g(b);
                    if (t.length > 0 && (null == e.min && (b.min = Math.min(b.min, t[0])), null == e.max && t.length > 1 && (b.max = Math.max(b.max, t[t.length - 1]))), g = function(a) {
                        var b, c, d = [];
                        for (c = 0; c < s.ticks.length; ++c) b = (s.ticks[c].v - s.min) / (s.max - s.min), b = a.min + b * (a.max - a.min), d.push(b);
                        return d
                    }, "time" != b.mode && null == e.tickDecimals) {
                        var u = Math.max(0, -Math.floor(Math.log(m) / Math.LN10) + 1),
                            v = g(b);
                        v.length > 1 && /\..*0$/.test((v[1] - v[0]).toFixed(u)) || (b.tickDecimals = u)
                    }
                }
            }
            b.tickGenerator = g, b.tickFormatter = a.isFunction(e.tickFormatter) ? function(a, b) {
                return "" + e.tickFormatter(a, b)
            } : i
        }

        function G(b) {
            var c = b.options.ticks,
                d = [];
            null == c || "number" == typeof c && c > 0 ? d = b.tickGenerator(b) : c && (d = a.isFunction(c) ? c({
                min: b.min,
                max: b.max
            }) : c);
            var e, f;
            for (b.ticks = [], e = 0; e < d.length; ++e) {
                var g = null,
                    h = d[e];
                "object" == typeof h ? (f = +h[0], h.length > 1 && (g = h[1])) : f = +h, null == g && (g = b.tickFormatter(f, b)), isNaN(f) || b.ticks.push({
                    v: f,
                    label: g
                })
            }
        }

        function H(a, b) {
            a.options.autoscaleMargin && b.length > 0 && (null == a.options.min && (a.min = Math.min(a.min, b[0].v)), null == a.options.max && b.length > 1 && (a.max = Math.max(a.max, b[b.length - 1].v)))
        }

        function I() {
            kb.clearRect(0, 0, pb, qb);
            var a = gb.grid;
            a.show && a.backgroundColor && K(), a.show && !a.aboveData && L();
            for (var b = 0; b < fb.length; ++b) g(tb.drawSeries, [kb, fb[b]]), N(fb[b]);
            g(tb.draw, [kb]), a.show && a.aboveData && L()
        }

        function J(a, b) {
            var c, d, e, f, g = n();
            for (i = 0; i < g.length; ++i)
                if (c = g[i], c.direction == b && (f = b + c.n + "axis", a[f] || 1 != c.n || (f = b + "axis"), a[f])) {
                    d = a[f].from, e = a[f].to;
                    break
                }
            if (a[f] || (c = "x" == b ? mb[0] : nb[0], d = a[b + "1"], e = a[b + "2"]), null != d && null != e && d > e) {
                var h = d;
                d = e, e = h
            }
            return {
                from: d,
                to: e,
                axis: c
            }
        }

        function K() {
            kb.save(), kb.translate(ob.left, ob.top), kb.fillStyle = eb(gb.grid.backgroundColor, sb, 0, "rgba(255, 255, 255, 0)"), kb.fillRect(0, 0, rb, sb), kb.restore()
        }

        function L() {
            var b;
            kb.save(), kb.translate(ob.left, ob.top);
            var c = gb.grid.markings;
            if (c) {
                if (a.isFunction(c)) {
                    var d = ub.getAxes();
                    d.xmin = d.xaxis.min, d.xmax = d.xaxis.max, d.ymin = d.yaxis.min, d.ymax = d.yaxis.max, c = c(d)
                }
                for (b = 0; b < c.length; ++b) {
                    var e = c[b],
                        f = J(e, "x"),
                        g = J(e, "y");
                    null == f.from && (f.from = f.axis.min), null == f.to && (f.to = f.axis.max), null == g.from && (g.from = g.axis.min), null == g.to && (g.to = g.axis.max), f.to < f.axis.min || f.from > f.axis.max || g.to < g.axis.min || g.from > g.axis.max || (f.from = Math.max(f.from, f.axis.min), f.to = Math.min(f.to, f.axis.max), g.from = Math.max(g.from, g.axis.min), g.to = Math.min(g.to, g.axis.max), (f.from != f.to || g.from != g.to) && (f.from = f.axis.p2c(f.from), f.to = f.axis.p2c(f.to), g.from = g.axis.p2c(g.from), g.to = g.axis.p2c(g.to), f.from == f.to || g.from == g.to ? (kb.beginPath(), kb.strokeStyle = e.color || gb.grid.markingsColor, kb.lineWidth = e.lineWidth || gb.grid.markingsLineWidth, kb.moveTo(f.from, g.from), kb.lineTo(f.to, g.to), kb.stroke()) : (kb.fillStyle = e.color || gb.grid.markingsColor, kb.fillRect(f.from, g.to, f.to - f.from, g.from - g.to))))
                }
            }
            for (var d = n(), h = gb.grid.borderWidth, i = 0; i < d.length; ++i) {
                var j, k, l, m, o = d[i],
                    p = o.box,
                    q = o.tickLength;
                if (o.show && 0 != o.ticks.length) {
                    for (kb.strokeStyle = o.options.tickColor || a.color.parse(o.options.color).scale("a", .22).toString(), kb.lineWidth = 1, "x" == o.direction ? (j = 0, k = "full" == q ? "top" == o.position ? 0 : sb : p.top - ob.top + ("top" == o.position ? p.height : 0)) : (k = 0, j = "full" == q ? "left" == o.position ? 0 : rb : p.left - ob.left + ("left" == o.position ? p.width : 0)), o.innermost || (kb.beginPath(), l = m = 0, "x" == o.direction ? l = rb : m = sb, 1 == kb.lineWidth && (j = Math.floor(j) + .5, k = Math.floor(k) + .5), kb.moveTo(j, k), kb.lineTo(j + l, k + m), kb.stroke()), kb.beginPath(), b = 0; b < o.ticks.length; ++b) {
                        var r = o.ticks[b].v;
                        l = m = 0, r < o.min || r > o.max || "full" == q && h > 0 && (r == o.min || r == o.max) || ("x" == o.direction ? (j = o.p2c(r), m = "full" == q ? -sb : q, "top" == o.position && (m = -m)) : (k = o.p2c(r), l = "full" == q ? -rb : q, "left" == o.position && (l = -l)), 1 == kb.lineWidth && ("x" == o.direction ? j = Math.floor(j) + .5 : k = Math.floor(k) + .5), kb.moveTo(j, k), kb.lineTo(j + l, k + m))
                    }
                    kb.stroke()
                }
            }
            h && (kb.lineWidth = h, kb.strokeStyle = gb.grid.borderColor, kb.strokeRect(-h / 2, -h / 2, rb + h, sb + h)), kb.restore()
        }

        function M() {
            b.find(".tickLabels").remove();
            for (var a = ['<div class="tickLabels" style="font-size:smaller">'], c = n(), d = 0; d < c.length; ++d) {
                var e = c[d],
                    f = e.box;
                if (e.show) {
                    a.push('<div class="' + e.direction + "Axis " + e.direction + e.n + 'Axis" style="color:' + e.options.color + '">');
                    for (var g = 0; g < e.ticks.length; ++g) {
                        var h = e.ticks[g];
                        if (!(!h.label || h.v < e.min || h.v > e.max)) {
                            var i, j = {};
                            "x" == e.direction ? (i = "center", j.left = Math.round(ob.left + e.p2c(h.v) - e.labelWidth / 2), "bottom" == e.position ? j.top = f.top + f.padding : j.bottom = qb - (f.top + f.height - f.padding)) : (j.top = Math.round(ob.top + e.p2c(h.v) - e.labelHeight / 2), "left" == e.position ? (j.right = pb - (f.left + f.width - f.padding), i = "right") : (j.left = f.left + f.padding, i = "left")), j.width = e.labelWidth;
                            var k = ["position:absolute", "text-align:" + i];
                            for (var l in j) k.push(l + ":" + j[l] + "px");
                            a.push('<div class="tickLabel" style="' + k.join(";") + '">' + h.label + "</div>")
                        }
                    }
                    a.push("</div>")
                }
            }
            a.push("</div>"), b.append(a.join(""))
        }

        function N(a) {
            a.lines.show && O(a), a.bars.show && R(a), a.points.show && P(a)
        }

        function O(a) {
            function b(a, b, c, d, e) {
                var f = a.points,
                    g = a.pointsize,
                    h = null,
                    i = null;
                kb.beginPath();
                for (var j = g; j < f.length; j += g) {
                    var k = f[j - g],
                        l = f[j - g + 1],
                        m = f[j],
                        n = f[j + 1];
                    if (null != k && null != m) {
                        if (n >= l && l < e.min) {
                            if (n < e.min) continue;
                            k = (e.min - l) / (n - l) * (m - k) + k, l = e.min
                        } else if (l >= n && n < e.min) {
                            if (l < e.min) continue;
                            m = (e.min - l) / (n - l) * (m - k) + k, n = e.min
                        }
                        if (l >= n && l > e.max) {
                            if (n > e.max) continue;
                            k = (e.max - l) / (n - l) * (m - k) + k, l = e.max
                        } else if (n >= l && n > e.max) {
                            if (l > e.max) continue;
                            m = (e.max - l) / (n - l) * (m - k) + k, n = e.max
                        }
                        if (m >= k && k < d.min) {
                            if (m < d.min) continue;
                            l = (d.min - k) / (m - k) * (n - l) + l, k = d.min
                        } else if (k >= m && m < d.min) {
                            if (k < d.min) continue;
                            n = (d.min - k) / (m - k) * (n - l) + l, m = d.min
                        }
                        if (k >= m && k > d.max) {
                            if (m > d.max) continue;
                            l = (d.max - k) / (m - k) * (n - l) + l, k = d.max
                        } else if (m >= k && m > d.max) {
                            if (k > d.max) continue;
                            n = (d.max - k) / (m - k) * (n - l) + l, m = d.max
                        }(k != h || l != i) && kb.moveTo(d.p2c(k) + b, e.p2c(l) + c), h = m, i = n, kb.lineTo(d.p2c(m) + b, e.p2c(n) + c)
                    }
                }
                kb.stroke()
            }

            function c(a, b, c) {
                for (var d = a.points, e = a.pointsize, f = Math.min(Math.max(0, c.min), c.max), g = 0, h = !1, i = 1, j = 0, k = 0;;) {
                    if (e > 0 && g > d.length + e) break;
                    g += e;
                    var l = d[g - e],
                        m = d[g - e + i],
                        n = d[g],
                        o = d[g + i];
                    if (h) {
                        if (e > 0 && null != l && null == n) {
                            k = g, e = -e, i = 2;
                            continue
                        }
                        if (0 > e && g == j + e) {
                            kb.fill(), h = !1, e = -e, i = 1, g = j = k + e;
                            continue
                        }
                    }
                    if (null != l && null != n) {
                        if (n >= l && l < b.min) {
                            if (n < b.min) continue;
                            m = (b.min - l) / (n - l) * (o - m) + m, l = b.min
                        } else if (l >= n && n < b.min) {
                            if (l < b.min) continue;
                            o = (b.min - l) / (n - l) * (o - m) + m, n = b.min
                        }
                        if (l >= n && l > b.max) {
                            if (n > b.max) continue;
                            m = (b.max - l) / (n - l) * (o - m) + m, l = b.max
                        } else if (n >= l && n > b.max) {
                            if (l > b.max) continue;
                            o = (b.max - l) / (n - l) * (o - m) + m, n = b.max
                        }
                        if (h || (kb.beginPath(), kb.moveTo(b.p2c(l), c.p2c(f)), h = !0), m >= c.max && o >= c.max) kb.lineTo(b.p2c(l), c.p2c(c.max)), kb.lineTo(b.p2c(n), c.p2c(c.max));
                        else if (m <= c.min && o <= c.min) kb.lineTo(b.p2c(l), c.p2c(c.min)), kb.lineTo(b.p2c(n), c.p2c(c.min));
                        else {
                            var p = l,
                                q = n;
                            o >= m && m < c.min && o >= c.min ? (l = (c.min - m) / (o - m) * (n - l) + l, m = c.min) : m >= o && o < c.min && m >= c.min && (n = (c.min - m) / (o - m) * (n - l) + l, o = c.min), m >= o && m > c.max && o <= c.max ? (l = (c.max - m) / (o - m) * (n - l) + l, m = c.max) : o >= m && o > c.max && m <= c.max && (n = (c.max - m) / (o - m) * (n - l) + l, o = c.max), l != p && kb.lineTo(b.p2c(p), c.p2c(m)), kb.lineTo(b.p2c(l), c.p2c(m)), kb.lineTo(b.p2c(n), c.p2c(o)), n != q && (kb.lineTo(b.p2c(n), c.p2c(o)), kb.lineTo(b.p2c(q), c.p2c(o)))
                        }
                    }
                }
            }
            kb.save(), kb.translate(ob.left, ob.top), kb.lineJoin = "round";
            var d = a.lines.lineWidth,
                e = a.shadowSize;
            if (d > 0 && e > 0) {
                kb.lineWidth = e, kb.strokeStyle = "rgba(0,0,0,0.1)";
                var f = Math.PI / 18;
                b(a.datapoints, Math.sin(f) * (d / 2 + e / 2), Math.cos(f) * (d / 2 + e / 2), a.xaxis, a.yaxis), kb.lineWidth = e / 2, b(a.datapoints, Math.sin(f) * (d / 2 + e / 4), Math.cos(f) * (d / 2 + e / 4), a.xaxis, a.yaxis)
            }
            kb.lineWidth = d, kb.strokeStyle = a.color;
            var g = S(a.lines, a.color, 0, sb);
            g && (kb.fillStyle = g, c(a.datapoints, a.xaxis, a.yaxis)), d > 0 && b(a.datapoints, 0, 0, a.xaxis, a.yaxis), kb.restore()
        }

        function P(a) {
            function b(a, b, c, d, e, f, g, h) {
                for (var i = a.points, j = a.pointsize, k = 0; k < i.length; k += j) {
                    var l = i[k],
                        m = i[k + 1];
                    null == l || l < f.min || l > f.max || m < g.min || m > g.max || (kb.beginPath(), l = f.p2c(l), m = g.p2c(m) + d, "circle" == h ? kb.arc(l, m, b, 0, e ? Math.PI : 2 * Math.PI, !1) : h(kb, l, m, b, e), kb.closePath(), c && (kb.fillStyle = c, kb.fill()), kb.stroke())
                }
            }
            kb.save(), kb.translate(ob.left, ob.top);
            var c = a.points.lineWidth,
                d = a.shadowSize,
                e = a.points.radius,
                f = a.points.symbol;
            if (c > 0 && d > 0) {
                var g = d / 2;
                kb.lineWidth = g, kb.strokeStyle = "rgba(0,0,0,0.1)", b(a.datapoints, e, null, g + g / 2, !0, a.xaxis, a.yaxis, f), kb.strokeStyle = "rgba(0,0,0,0.2)", b(a.datapoints, e, null, g / 2, !0, a.xaxis, a.yaxis, f)
            }
            kb.lineWidth = c, kb.strokeStyle = a.color, b(a.datapoints, e, S(a.points, a.color), 0, !1, a.xaxis, a.yaxis, f), kb.restore()
        }

        function Q(a, b, c, d, e, f, g, h, i, j, k, l) {
            var m, n, o, p, q, r, s, t, u;
            k ? (t = r = s = !0, q = !1, m = c, n = a, p = b + d, o = b + e, m > n && (u = n, n = m, m = u, q = !0, r = !1)) : (q = r = s = !0, t = !1, m = a + d, n = a + e, o = c, p = b, o > p && (u = p, p = o, o = u, t = !0, s = !1)), n < h.min || m > h.max || p < i.min || o > i.max || (m < h.min && (m = h.min, q = !1), n > h.max && (n = h.max, r = !1), o < i.min && (o = i.min, t = !1), p > i.max && (p = i.max, s = !1), m = h.p2c(m), o = i.p2c(o), n = h.p2c(n), p = i.p2c(p), g && (j.beginPath(), j.moveTo(m, o), j.lineTo(m, p), j.lineTo(n, p), j.lineTo(n, o), j.fillStyle = g(o, p), j.fill()), l > 0 && (q || r || s || t) && (j.beginPath(), j.moveTo(m, o + f), q ? j.lineTo(m, p + f) : j.moveTo(m, p + f), s ? j.lineTo(n, p + f) : j.moveTo(n, p + f), r ? j.lineTo(n, o + f) : j.moveTo(n, o + f), t ? j.lineTo(m, o + f) : j.moveTo(m, o + f), j.stroke()))
        }

        function R(a) {
            function b(b, c, d, e, f, g, h) {
                for (var i = b.points, j = b.pointsize, k = 0; k < i.length; k += j) null != i[k] && Q(i[k], i[k + 1], i[k + 2], c, d, e, f, g, h, kb, a.bars.horizontal, a.bars.lineWidth)
            }
            kb.save(), kb.translate(ob.left, ob.top), kb.lineWidth = a.bars.lineWidth, kb.strokeStyle = a.color;
            var c = "left" == a.bars.align ? 0 : -a.bars.barWidth / 2,
                d = a.bars.fill ? function(b, c) {
                    return S(a.bars, a.color, b, c)
                } : null;
            b(a.datapoints, c, c + a.bars.barWidth, 0, d, a.xaxis, a.yaxis), kb.restore()
        }

        function S(b, c, d, e) {
            var f = b.fill;
            if (!f) return null;
            if (b.fillColor) return eb(b.fillColor, d, e, c);
            var g = a.color.parse(c);
            return g.a = "number" == typeof f ? f : .4, g.normalize(), g.toString()
        }

        function T() {
            if (b.find(".legend").remove(), gb.legend.show) {
                for (var c, d, e = [], f = !1, g = gb.legend.labelFormatter, h = 0; h < fb.length; ++h) c = fb[h], d = c.label, d && (0 == h % gb.legend.noColumns && (f && e.push("</tr>"), e.push("<tr>"), f = !0), g && (d = g(d, c)), e.push('<td class="legendColorBox"><div style="border:1px solid ' + gb.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + c.color + ';overflow:hidden"></div></div></td>' + '<td class="legendLabel">' + d + "</td>"));
                if (f && e.push("</tr>"), 0 != e.length) {
                    var i = '<table style="font-size:smaller;color:' + gb.grid.color + '">' + e.join("") + "</table>";
                    if (null != gb.legend.container) a(gb.legend.container).html(i);
                    else {
                        var j = "",
                            k = gb.legend.position,
                            l = gb.legend.margin;
                        null == l[0] && (l = [l, l]), "n" == k.charAt(0) ? j += "top:" + (l[1] + ob.top) + "px;" : "s" == k.charAt(0) && (j += "bottom:" + (l[1] + ob.bottom) + "px;"), "e" == k.charAt(1) ? j += "right:" + (l[0] + ob.right) + "px;" : "w" == k.charAt(1) && (j += "left:" + (l[0] + ob.left) + "px;");
                        var m = a('<div class="legend">' + i.replace('style="', 'style="position:absolute;' + j + ";") + "</div>").appendTo(b);
                        if (0 != gb.legend.backgroundOpacity) {
                            var n = gb.legend.backgroundColor;
                            null == n && (n = gb.grid.backgroundColor, n = n && "string" == typeof n ? a.color.parse(n) : a.color.extract(m, "background-color"), n.a = 1, n = n.toString());
                            var o = m.children();
                            a('<div style="position:absolute;width:' + o.width() + "px;height:" + o.height() + "px;" + j + "background-color:" + n + ';"> </div>').prependTo(m).css("opacity", gb.legend.backgroundOpacity)
                        }
                    }
                }
            }
        }

        function U(a, b, c) {
            var d, e, f = gb.grid.mouseActiveRadius,
                g = f * f + 1,
                h = null;
            for (d = fb.length - 1; d >= 0; --d)
                if (c(fb[d])) {
                    var i = fb[d],
                        j = i.xaxis,
                        k = i.yaxis,
                        l = i.datapoints.points,
                        m = i.datapoints.pointsize,
                        n = j.c2p(a),
                        o = k.c2p(b),
                        p = f / j.scale,
                        q = f / k.scale;
                    if (j.options.inverseTransform && (p = Number.MAX_VALUE), k.options.inverseTransform && (q = Number.MAX_VALUE), i.lines.show || i.points.show)
                        for (e = 0; e < l.length; e += m) {
                            var r = l[e],
                                s = l[e + 1];
                            if (null != r && !(r - n > p || -p > r - n || s - o > q || -q > s - o)) {
                                var t = Math.abs(j.p2c(r) - a),
                                    u = Math.abs(k.p2c(s) - b),
                                    v = t * t + u * u;
                                g > v && (g = v, h = [d, e / m])
                            }
                        }
                    if (i.bars.show && !h) {
                        var w = "left" == i.bars.align ? 0 : -i.bars.barWidth / 2,
                            x = w + i.bars.barWidth;
                        for (e = 0; e < l.length; e += m) {
                            var r = l[e],
                                s = l[e + 1],
                                y = l[e + 2];
                            null != r && (fb[d].bars.horizontal ? n <= Math.max(y, r) && n >= Math.min(y, r) && o >= s + w && s + x >= o : n >= r + w && r + x >= n && o >= Math.min(y, s) && o <= Math.max(y, s)) && (h = [d, e / m])
                        }
                    }
                }
            return h ? (d = h[0], e = h[1], m = fb[d].datapoints.pointsize, {
                datapoint: fb[d].datapoints.points.slice(e * m, (e + 1) * m),
                dataIndex: e,
                series: fb[d],
                seriesIndex: d
            }) : null
        }

        function V(a) {
            gb.grid.hoverable && Y("plothover", a, function(a) {
                return 0 != a.hoverable
            })
        }

        function W(a) {
            gb.grid.hoverable && Y("plothover", a, function() {
                return !1
            })
        }

        function X(a) {
            Y("plotclick", a, function(a) {
                return 0 != a.clickable
            })
        }

        function Y(a, c, d) {
            var e = jb.offset(),
                f = c.pageX - e.left - ob.left,
                g = c.pageY - e.top - ob.top,
                h = o({
                    left: f,
                    top: g
                });
            h.pageX = c.pageX, h.pageY = c.pageY;
            var i = U(f, g, d);
            if (i && (i.pageX = parseInt(i.series.xaxis.p2c(i.datapoint[0]) + e.left + ob.left), i.pageY = parseInt(i.series.yaxis.p2c(i.datapoint[1]) + e.top + ob.top)), gb.grid.autoHighlight) {
                for (var j = 0; j < vb.length; ++j) {
                    var k = vb[j];
                    k.auto != a || i && k.series == i.series && k.point[0] == i.datapoint[0] && k.point[1] == i.datapoint[1] || ab(k.series, k.point)
                }
                i && _(i.series, i.datapoint, a)
            }
            b.trigger(a, [h, i])
        }

        function Z() {
            wb || (wb = setTimeout($, 30))
        }

        function $() {
            wb = null, lb.save(), lb.clearRect(0, 0, pb, qb), lb.translate(ob.left, ob.top);
            var a, b;
            for (a = 0; a < vb.length; ++a) b = vb[a], b.series.bars.show ? db(b.series, b.point) : cb(b.series, b.point);
            lb.restore(), g(tb.drawOverlay, [lb])
        }

        function _(a, b, c) {
            if ("number" == typeof a && (a = fb[a]), "number" == typeof b) {
                var d = a.datapoints.pointsize;
                b = a.datapoints.points.slice(d * b, d * (b + 1))
            }
            var e = bb(a, b); - 1 == e ? (vb.push({
                series: a,
                point: b,
                auto: c
            }), Z()) : c || (vb[e].auto = !1)
        }

        function ab(a, b) {
            null == a && null == b && (vb = [], Z()), "number" == typeof a && (a = fb[a]), "number" == typeof b && (b = a.data[b]);
            var c = bb(a, b); - 1 != c && (vb.splice(c, 1), Z())
        }

        function bb(a, b) {
            for (var c = 0; c < vb.length; ++c) {
                var d = vb[c];
                if (d.series == a && d.point[0] == b[0] && d.point[1] == b[1]) return c
            }
            return -1
        }

        function cb(b, c) {
            var d = c[0],
                e = c[1],
                f = b.xaxis,
                g = b.yaxis;
            if (!(d < f.min || d > f.max || e < g.min || e > g.max)) {
                var h = b.points.radius + b.points.lineWidth / 2;
                lb.lineWidth = h, lb.strokeStyle = a.color.parse(b.color).scale("a", .5).toString();
                var i = 1.5 * h,
                    d = f.p2c(d),
                    e = g.p2c(e);
                lb.beginPath(), "circle" == b.points.symbol ? lb.arc(d, e, i, 0, 2 * Math.PI, !1) : b.points.symbol(lb, d, e, i, !1), lb.closePath(), lb.stroke()
            }
        }

        function db(b, c) {
            lb.lineWidth = b.bars.lineWidth, lb.strokeStyle = a.color.parse(b.color).scale("a", .5).toString();
            var d = a.color.parse(b.color).scale("a", .5).toString(),
                e = "left" == b.bars.align ? 0 : -b.bars.barWidth / 2;
            Q(c[0], c[1], c[2] || 0, e, e + b.bars.barWidth, 0, function() {
                return d
            }, b.xaxis, b.yaxis, lb, b.bars.horizontal, b.bars.lineWidth)
        }

        function eb(b, c, d, e) {
            if ("string" == typeof b) return b;
            for (var f = kb.createLinearGradient(0, d, 0, c), g = 0, h = b.colors.length; h > g; ++g) {
                var i = b.colors[g];
                if ("string" != typeof i) {
                    var j = a.color.parse(e);
                    null != i.brightness && (j = j.scale("rgb", i.brightness)), null != i.opacity && (j.a *= i.opacity), i = j.toString()
                }
                f.addColorStop(g / (h - 1), i)
            }
            return f
        }
        var fb = [],
            gb = {
                colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"],
                legend: {
                    show: !0,
                    noColumns: 1,
                    labelFormatter: null,
                    labelBoxBorderColor: "#ccc",
                    container: null,
                    position: "ne",
                    margin: 5,
                    backgroundColor: null,
                    backgroundOpacity: .85
                },
                xaxis: {
                    show: null,
                    position: "bottom",
                    mode: null,
                    color: null,
                    tickColor: null,
                    transform: null,
                    inverseTransform: null,
                    min: null,
                    max: null,
                    autoscaleMargin: null,
                    ticks: null,
                    tickFormatter: null,
                    labelWidth: null,
                    labelHeight: null,
                    reserveSpace: null,
                    tickLength: null,
                    alignTicksWithAxis: null,
                    tickDecimals: null,
                    tickSize: null,
                    minTickSize: null,
                    monthNames: null,
                    timeformat: null,
                    twelveHourClock: !1
                },
                yaxis: {
                    autoscaleMargin: .02,
                    position: "left"
                },
                xaxes: [],
                yaxes: [],
                series: {
                    points: {
                        show: !1,
                        radius: 3,
                        lineWidth: 2,
                        fill: !0,
                        fillColor: "#ffffff",
                        symbol: "circle"
                    },
                    lines: {
                        lineWidth: 2,
                        fill: !1,
                        fillColor: null,
                        steps: !1
                    },
                    bars: {
                        show: !1,
                        lineWidth: 2,
                        barWidth: 1,
                        fill: !0,
                        fillColor: null,
                        align: "left",
                        horizontal: !1
                    },
                    shadowSize: 3
                },
                grid: {
                    show: !0,
                    aboveData: !1,
                    color: "#545454",
                    backgroundColor: null,
                    borderColor: null,
                    tickColor: null,
                    labelMargin: 5,
                    axisMargin: 8,
                    borderWidth: 2,
                    minBorderMargin: null,
                    markings: null,
                    markingsColor: "#f4f4f4",
                    markingsLineWidth: 2,
                    clickable: !1,
                    hoverable: !1,
                    autoHighlight: !0,
                    mouseActiveRadius: 10
                },
                hooks: {}
            }, hb = null,
            ib = null,
            jb = null,
            kb = null,
            lb = null,
            mb = [],
            nb = [],
            ob = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }, pb = 0,
            qb = 0,
            rb = 0,
            sb = 0,
            tb = {
                processOptions: [],
                processRawData: [],
                processDatapoints: [],
                drawSeries: [],
                draw: [],
                bindEvents: [],
                drawOverlay: [],
                shutdown: []
            }, ub = this;
        ub.setData = k, ub.setupGrid = D, ub.draw = I, ub.getPlaceholder = function() {
            return b
        }, ub.getCanvas = function() {
            return hb
        }, ub.getPlotOffset = function() {
            return ob
        }, ub.width = function() {
            return rb
        }, ub.height = function() {
            return sb
        }, ub.offset = function() {
            var a = jb.offset();
            return a.left += ob.left, a.top += ob.top, a
        }, ub.getData = function() {
            return fb
        }, ub.getAxes = function() {
            var b = {};
            return a.each(mb.concat(nb), function(a, c) {
                c && (b[c.direction + (1 != c.n ? c.n : "") + "axis"] = c)
            }), b
        }, ub.getXAxes = function() {
            return mb
        }, ub.getYAxes = function() {
            return nb
        }, ub.c2p = o, ub.p2c = p, ub.getOptions = function() {
            return gb
        }, ub.highlight = _, ub.unhighlight = ab, ub.triggerRedrawOverlay = Z, ub.pointOffset = function(a) {
            return {
                left: parseInt(mb[m(a, "x") - 1].p2c(+a.x) + ob.left),
                top: parseInt(nb[m(a, "y") - 1].p2c(+a.y) + ob.top)
            }
        }, ub.shutdown = y, ub.resize = function() {
            u(), v(hb), v(ib)
        }, ub.hooks = tb, h(ub), j(e), w(), k(d), D(), I(), x();
        var vb = [],
            wb = null
    }

    function c(a, b) {
        return b * Math.floor(a / b)
    }
    a.plot = function(c, d, e) {
        var f = new b(a(c), d, e, a.plot.plugins);
        return f
    }, a.plot.version = "0.7", a.plot.plugins = [], a.plot.formatDate = function(a, b, c) {
        var d = function(a) {
            return a = "" + a, 1 == a.length ? "0" + a : a
        }, e = [],
            f = !1,
            g = !1,
            h = a.getUTCHours(),
            i = 12 > h;
        null == c && (c = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]), -1 != b.search(/%p|%P/) && (h > 12 ? h -= 12 : 0 == h && (h = 12));
        for (var j = 0; j < b.length; ++j) {
            var k = b.charAt(j);
            if (f) {
                switch (k) {
                    case "h":
                        k = "" + h;
                        break;
                    case "H":
                        k = d(h);
                        break;
                    case "M":
                        k = d(a.getUTCMinutes());
                        break;
                    case "S":
                        k = d(a.getUTCSeconds());
                        break;
                    case "d":
                        k = "" + a.getUTCDate();
                        break;
                    case "m":
                        k = "" + (a.getUTCMonth() + 1);
                        break;
                    case "y":
                        k = "" + a.getUTCFullYear();
                        break;
                    case "b":
                        k = "" + c[a.getUTCMonth()];
                        break;
                    case "p":
                        k = i ? "am" : "pm";
                        break;
                    case "P":
                        k = i ? "AM" : "PM";
                        break;
                    case "0":
                        k = "", g = !0
                }
                k && g && (k = d(k), g = !1), e.push(k), g || (f = !1)
            } else "%" == k ? f = !0 : e.push(k)
        }
        return e.join("")
    }
}(jQuery), Array.prototype.map || (Array.prototype.map = function(a) {
    var b = this.length;
    if ("function" != typeof a) throw new TypeError;
    for (var c = new Array(b), d = arguments[1], e = 0; b > e; e++) e in this && (c[e] = a.call(d, this[e], e, this));
    return c
});
var costco = function() {
    function evalFunction(funcString) {
        try {
            eval("var editFunc = " + funcString)
        } catch (e) {
            return {
                errorMessage: e + ""
            }
        }
        return editFunc
    }

    function previewTransform(a, b, c) {
        for (var d = [], e = mapDocs($.extend(!0, {}, a), b), f = 0; f < e.docs.length; f++) {
            var g = a[f],
                h = e.docs[f];
            h || (h = {}), c ? d.push({
                before: JSON.stringify(g[c]),
                after: JSON.stringify(h[c])
            }) : d.push({
                before: JSON.stringify(g),
                after: JSON.stringify(h)
            })
        }
        return d
    }

    function mapDocs(a, b) {
        var c = [],
            d = [],
            e = [],
            f = _.map(a, function(a) {
                try {
                    var f = b(_.clone(a))
                } catch (g) {
                    return e.push(a), void 0
                }
                return null === f ? (f = {
                    _deleted: !0
                }, c.push(f), d.push(a)) : f && !_.isEqual(f, a) && c.push(f), f
            });
        return {
            edited: c,
            docs: f,
            deleted: d,
            failed: e
        }
    }
    return {
        evalFunction: evalFunction,
        previewTransform: previewTransform,
        mapDocs: mapDocs
    }
}();
this.recline = this.recline || {}, this.recline.Model = this.recline.Model || {},
function(a, b) {
    b.Dataset = Backbone.Model.extend({
        __type__: "Dataset",
        initialize: function(a, c) {
            _.bindAll(this, "query"), this.backend = c, "string" == typeof c && (this.backend = this._backendFromString(c)), this.fields = new b.FieldList, this.resource_id = a.id, this.currentDocuments = new b.DocumentList, this.facets = new b.FacetList, this.docCount = null, this.queryState = new b.Query, this.queryState.bind("change", this.query), this.queryState.bind("facet:add", this.query)
        },
        query: function(c) {
            var d = this;
            this.trigger("query:start");
            var e = d._prepareQuery(c),
                f = a.Deferred();
            return this.backend.query(this, e).done(function(a) {
                d.docCount = a.total;
                var c = _.map(a.hits, function(a) {
                    var c = new b.Document(a._source);
                    return c.backend = d.backend, c.dataset = d, c
                });
                if (d.currentDocuments.reset(c), a.facets) {
                    var e = _.map(a.facets, function(a, c) {
                        return a.id = c, new b.Facet(a)
                    });
                    d.facets.reset(e)
                }
                d.trigger("query:done"), f.resolve(d.currentDocuments)
            }).fail(function(a) {
                d.trigger("query:fail", a), f.reject(a)
            }), f.promise()
        },
        _prepareQuery: function(a) {
            a && this.queryState.set(a);
            var b = this.queryState.toJSON();
            return b
        },
        toTemplateJSON: function() {
            var a = this.toJSON();
            return a.docCount = this.docCount, a.fields = this.fields.toJSON(), a
        },
        _backendFromString: function(a) {
            var b = a.split("."),
                c = window;
            for (ii = 0; ii < b.length && c; ii++) c = c[b[ii]];
            if (c) return new c;
            var d = null;
            return recline && recline.Backend && _.each(_.keys(recline.Backend), function(b) {
                b.toLowerCase() === a.toLowerCase() && (d = new recline.Backend[b])
            }), d
        }
    }), b.Dataset.restore = function(a) {
        var b = null;
        return a.url && !a.dataset && (a.dataset = {
            url: a.url
        }), b = "memory" === a.backend ? recline.Backend.createDataset([{
            stub: "this is a stub dataset because we do not restore memory datasets"
        }], [], a.dataset) : new recline.Model.Dataset(a.dataset, a.backend)
    }, b.Document = Backbone.Model.extend({
        __type__: "Document",
        initialize: function() {
            _.bindAll(this, "getFieldValue")
        },
        getFieldValue: function(a) {
            var b = this.get(a.id);
            return a.deriver && (b = a.deriver(b, a, this)), a.renderer && (b = a.renderer(b, a, this)), b
        }
    }), b.DocumentList = Backbone.Collection.extend({
        __type__: "DocumentList",
        model: b.Document
    }), b.Field = Backbone.Model.extend({
        defaults: {
            label: null,
            type: "string",
            format: null,
            is_derived: !1
        },
        initialize: function(a, b) {
            if ("0" in a) throw new Error("Looks like you did not pass a proper hash with id to Field constructor");
            null === this.attributes.label && this.set({
                label: this.id
            }), b && (this.renderer = b.renderer, this.deriver = b.deriver), this.renderer || (this.renderer = this.defaultRenderers[this.get("type")])
        },
        defaultRenderers: {
            object: function(a) {
                return JSON.stringify(a)
            },
            "float": function(a, b) {
                var c = b.get("format");
                return "percentage" === c ? a + "%" : a
            },
            string: function(a, b) {
				a = a.replace(/\u00e6/g, '\u0107')
					 .replace(/\u00c6/g, '\u0106')
					 .replace(/\u00c8/g, '\u010c')
					 .replace(/\u00e8/g, '\u010d')
				         .replace(/\u00F0/g, '\u0111')
 					 .replace(/\u00d0/g, '\u0110');
                var c = b.get("format");
                if ("link" === c) return '<a href="VAL">VAL</a>'.replace(/VAL/g, a);
                if ("markdown" === c) {
                    if ("undefined" != typeof Showdown) {
                        var d = new Showdown.converter;
                        return out = d.makeHtml(a)
                    }
                    return a
                }
                return a
            }
        }
    }), b.FieldList = Backbone.Collection.extend({
        model: b.Field
    }), b.Query = Backbone.Model.extend({
        defaults: function() {
            return {
                size: 100,
                from: 0,
                facets: {},
                filters: []
            }
        },
        addTermFilter: function(a, b) {
            var c = this.get("filters"),
                d = {
                    term: {}
                };
            d.term[a] = b, c.push(d), this.set({
                filters: c
            }), b ? this.trigger("change") : this.trigger("change:filters:new-blank")
        },
        removeFilter: function(a) {
            var b = this.get("filters");
            b.splice(a, 1), this.set({
                filters: b
            }), this.trigger("change")
        },
        addFacet: function(a) {
            var b = this.get("facets");
            _.contains(_.keys(b), a) || (b[a] = {
                terms: {
                    field: a
                }
            }, this.set({
                facets: b
            }, {
                silent: !0
            }), this.trigger("facet:add", this))
        },
        addHistogramFacet: function(a) {
            var b = this.get("facets");
            b[a] = {
                date_histogram: {
                    field: a,
                    interval: "day"
                }
            }, this.set({
                facets: b
            }, {
                silent: !0
            }), this.trigger("facet:add", this)
        }
    }), b.Facet = Backbone.Model.extend({
        defaults: function() {
            return {
                _type: "terms",
                total: 0,
                other: 0,
                missing: 0,
                terms: []
            }
        }
    }), b.FacetList = Backbone.Collection.extend({
        model: b.Facet
    }), b.ObjectState = Backbone.Model.extend({}), b.backends = {}
}(jQuery, this.recline.Model);
var util = function() {
    function a() {
        var a = function() {
            this.emit = function(a, b) {
                b || (b = "data"), this.trigger(b, a)
            }
        };
        return MicroEvent.mixin(a), new a
    }

    function b(a) {
        var b = {
            8: "backspace",
            9: "tab",
            13: "return",
            16: "shift",
            17: "ctrl",
            18: "alt",
            19: "pause",
            20: "capslock",
            27: "esc",
            32: "space",
            33: "pageup",
            34: "pagedown",
            35: "end",
            36: "home",
            37: "left",
            38: "up",
            39: "right",
            40: "down",
            45: "insert",
            46: "del",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            106: "*",
            107: "+",
            109: "-",
            110: ".",
            111: "/",
            112: "f1",
            113: "f2",
            114: "f3",
            115: "f4",
            116: "f5",
            117: "f6",
            118: "f7",
            119: "f8",
            120: "f9",
            121: "f10",
            122: "f11",
            123: "f12",
            144: "numlock",
            145: "scroll",
            191: "/",
            224: "meta"
        };
        window.addEventListener("keyup", function(c) {
            var d = b[c.keyCode];
            _.include(a, d) && app.emitter.emit("keyup", d)
        }, !1)
    }

    function c(a, b) {
        var c = a.find(".cancelButton");
        c.click(b)
    }

    function d(a) {
        $("." + a).show(), $("." + a + "-overlay").show()
    }

    function e(a) {
        $("." + a).hide(), $("." + a + "-overlay").hide()
    }

    function f(a, b, c) {
        var d = $(b.target).position();
        c && (c.top && (d.top += c.top), c.left && (d.left += c.left)), $("." + a + "-overlay").show().click(function(b) {
            $(b.target).hide(), $("." + a).hide()
        }), $("." + a).show().css({
            top: d.top + $(b.target).height(),
            left: d.left
        })
    }

    function g(a, b, c) {
        c || (c = {
            data: {}
        }), c.data || (c = {
            data: c
        });
        var d = $.mustache(h[a], c.data),
            e = null;
        e = b instanceof jQuery ? b : $("." + b + ":first"), c.append ? e.append(d) : e.html(d)
    }
    var h = {
        transformActions: '<li><a data-action="transform" class="menuAction" href="JavaScript:void(0);">Global transform...</a></li>',
        cellEditor: '       <div class="menu-container data-table-cell-editor">         <textarea class="data-table-cell-editor-editor" bind="textarea">{{value}}</textarea>         <div id="data-table-cell-editor-actions">           <div class="data-table-cell-editor-action">             <button class="okButton btn primary">Update</button>             <button class="cancelButton btn danger">Cancel</button>           </div>         </div>       </div>     ',
        editPreview: '       <div class="expression-preview-table-wrapper">         <table>         <thead>         <tr>           <th class="expression-preview-heading">             before           </th>           <th class="expression-preview-heading">             after           </th>         </tr>         </thead>         <tbody>         {{#rows}}         <tr>           <td class="expression-preview-value">             {{before}}           </td>           <td class="expression-preview-value">             {{after}}           </td>         </tr>         {{/rows}}         </tbody>         </table>       </div>     '
    };
    return $.fn.serializeObject = function() {
        var a = {}, b = this.serializeArray();
        return $.each(b, function() {
            a[this.name] ? (a[this.name].push || (a[this.name] = [a[this.name]]), a[this.name].push(this.value || "")) : a[this.name] = this.value || ""
        }), a
    }, {
        registerEmitter: a,
        listenFor: b,
        show: d,
        hide: e,
        position: f,
        render: g,
        observeExit: c
    }
}();
this.recline = this.recline || {}, this.recline.View = this.recline.View || {},
function(a, b) {
    b.Graph = Backbone.View.extend({
        tagName: "div",
        className: "recline-graph",
        template: '   <div class="editor">     <div class="editor-info editor-hide-info">       <h3 class="action-toggle-help">Help &raquo;</h3>       <p>To create a chart select a column (group) to use as the x-axis          then another column (Series A) to plot against it.</p>       <p>You can add add          additional series by clicking the "Add series" button</p>     </div>     <form class="form-stacked">       <div class="clearfix">         <label>Graph Type</label>         <div class="input editor-type">           <select>           <option value="lines-and-points">Lines and Points</option>           <option value="lines">Lines</option>           <option value="points">Points</option>           <option value="bars">Bars</option>           </select>         </div>         <label>Group Column (x-axis)</label>         <div class="input editor-group">           <select>           <option value="">Please choose ...</option>           {{#fields}}           <option value="{{id}}">{{label}}</option>           {{/fields}}           </select>         </div>         <div class="editor-series-group">         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-add">Add Series</button>       </div>       <div class="editor-buttons editor-submit" comment="hidden temporarily" style="display: none;">         <button class="editor-save">Save</button>         <input type="hidden" class="editor-id" value="chart-1" />       </div>     </form>   </div>   <div class="panel graph">     <div class="js-temp-notice alert alert-block">       <h3 class="alert-heading">Hey there!</h3>       <p>There\'s no graph here yet because we don\'t know what fields you\'d like to see plotted.</p>       <p>Please tell us by <strong>using the menu on the right</strong> and a graph will automatically appear.</p>     </div>   </div> </div> ',
        templateSeriesEditor: '     <div class="editor-series js-series-{{seriesIndex}}">       <label>Series <span>{{seriesName}} (y-axis)</span>         [<a href="#remove" class="action-remove-series">Remove</a>]       </label>       <div class="input">         <select>         <option value="">Please choose ...</option>         {{#fields}}         <option value="{{id}}">{{label}}</option>         {{/fields}}         </select>       </div>     </div>   ',
        events: {
            "change form select": "onEditorSubmit",
            "click .editor-add": "_onAddSeries",
            "click .action-remove-series": "removeSeries",
            "click .action-toggle-help": "toggleHelp"
        },
        initialize: function(b) {
            this.el = a(this.el), _.bindAll(this, "render", "redraw"), this.model.bind("change", this.render), this.model.fields.bind("reset", this.render), this.model.fields.bind("add", this.render), this.model.currentDocuments.bind("add", this.redraw), this.model.currentDocuments.bind("reset", this.redraw);
            var c = _.extend({
                group: null,
                series: [""],
                graphType: "lines-and-points"
            }, b.state);
            this.state = new recline.Model.ObjectState(c), this.render()
        },
        render: function() {
            var b = this,
                c = this.model.toTemplateJSON(),
                d = a.mustache(this.template, c);
            return a(this.el).html(d), this.$graph = this.el.find(".panel.graph"), this.state.get("graphType") && this._selectOption(".editor-type", this.state.get("graphType")), this.state.get("group") && this._selectOption(".editor-group", this.state.get("group")), _.each(this.state.get("series"), function(a, c) {
                b.addSeries(c), b._selectOption(".editor-series.js-series-" + c, a)
            }), this
        },
        _selectOption: function(b, c) {
            var d = this.el.find(b + " select > option");
            d && d.each(function() {
                return this.value == c ? (a(this).attr("selected", "selected"), !1) : void 0
            })
        },
        onEditorSubmit: function() {
            this.el.find(".editor-group select");
            var b = this.el.find(".editor-series select"),
                c = b.map(function() {
                    return a(this).val()
                }),
                d = {
                    series: a.makeArray(c),
                    group: this.el.find(".editor-group select").val(),
                    graphType: this.el.find(".editor-type select").val()
                };
            this.state.set(d), this.redraw()
        },
        redraw: function() {
            var b = !jQuery.expr.filters.hidden(this.el[0]);
            if (b && 0 !== this.model.currentDocuments.length) {
                var c = this.createSeries(),
                    d = this.getGraphOptions(this.state.attributes.graphType);
                this.plot = a.plot(this.$graph, c, d), this.setupTooltips()
            }
        },
        getGraphOptions: function(a) {
            var b = this,
                c = function(a) {
                    if (b.model.currentDocuments.models[a]) {
                        var c = b.model.currentDocuments.models[a].get(b.state.attributes.group);
                        return "number" == typeof c ? a : c
                    }
                    return a
                }, d = {};
            "date" === this.model.fields.get(this.state.get("group")).get("type") && (d.mode = "time", d.timeformat = "%y-%b");
            var e = {
                lines: {
                    series: {
                        lines: {
                            show: !0
                        }
                    },
                    xaxis: d
                },
                points: {
                    series: {
                        points: {
                            show: !0
                        }
                    },
                    xaxis: d,
                    grid: {
                        hoverable: !0,
                        clickable: !0
                    }
                },
                "lines-and-points": {
                    series: {
                        points: {
                            show: !0
                        },
                        lines: {
                            show: !0
                        }
                    },
                    xaxis: d,
                    grid: {
                        hoverable: !0,
                        clickable: !0
                    }
                },
                bars: {
                    series: {
                        lines: {
                            show: !1
                        },
                        bars: {
                            show: !0,
                            barWidth: 1,
                            align: "center",
                            fill: !0,
                            horizontal: !0
                        }
                    },
                    grid: {
                        hoverable: !0,
                        clickable: !0
                    },
                    yaxis: {
                        tickSize: 1,
                        tickLength: 1,
                        tickFormatter: c,
                        min: -.5,
                        max: b.model.currentDocuments.length - .5
                    }
                }
            };
            return e[a]
        },
        setupTooltips: function() {
            function b(b, c, d) {
                a('<div id="flot-tooltip">' + d + "</div>").css({
                    position: "absolute",
                    display: "none",
                    top: c + 5,
                    left: b + 5,
                    border: "1px solid #fdd",
                    padding: "2px",
                    "background-color": "#fee",
                    opacity: .8
                }).appendTo("body").fadeIn(200)
            }
            var c = this,
                d = null;
            this.$graph.bind("plothover", function(e, f, g) {
                if (g) {
                    if (d != g.datapoint) {
                        d = g.datapoint, a("#flot-tooltip").remove();
                        var h = g.datapoint[0],
                            i = g.datapoint[1];
                        h = c.model.currentDocuments.models[h] ? c.model.currentDocuments.models[h].get(c.state.attributes.group) : h.toFixed(2), i = i.toFixed(2);
                        var j = _.template("<%= group %> = <%= x %>, <%= series %> = <%= y %>", {
                            group: c.state.attributes.group,
                            x: h,
                            series: g.series.label,
                            y: i
                        });
                        b(g.pageX, g.pageY, j)
                    }
                } else a("#flot-tooltip").remove(), d = null
            })
        },
        createSeries: function() {
            var a = this,
                b = [];
            return _.each(this.state.attributes.series, function(c) {
                var d = [];
                _.each(a.model.currentDocuments.models, function(b, e) {
                    var f = a.model.fields.get(a.state.attributes.group),
                        g = b.getFieldValue(f),
                        h = "date" === f.get("type");
                    h && (g = new Date(g));
                    var i = a.model.fields.get(c),
                        j = b.getFieldValue(i);
                    "string" == typeof g && (g = e), "bars" == a.state.attributes.graphType ? d.push([j, g]) : d.push([g, j])
                }), b.push({
                    data: d,
                    label: c
                })
            }), b
        },
        addSeries: function(b) {
            var c = _.extend({
                seriesIndex: b,
                seriesName: String.fromCharCode(b + 64 + 1)
            }, this.model.toTemplateJSON()),
                d = a.mustache(this.templateSeriesEditor, c);
            return this.el.find(".editor-series-group").append(d), this
        },
        _onAddSeries: function(a) {
            a.preventDefault(), this.addSeries(this.state.get("series").length)
        },
        removeSeries: function(b) {
            b.preventDefault();
            var c = a(b.target);
            c.parent().parent().remove(), this.onEditorSubmit()
        },
        toggleHelp: function() {
            this.el.find(".editor-info").toggleClass("editor-hide-info")
        }
    })
}(jQuery, recline.View), this.recline = this.recline || {}, this.recline.View = this.recline.View || {},
function(a, b) {
    b.Grid = Backbone.View.extend({
        tagName: "div",
        className: "recline-grid-container",
        initialize: function(b) {
            this.el = a(this.el), _.bindAll(this, "render"), this.model.currentDocuments.bind("add", this.render), this.model.currentDocuments.bind("reset", this.render), this.model.currentDocuments.bind("remove", this.render), this.tempState = {};
            var c = _.extend({
                hiddenFields: []
            }, b.state);
            this.state = new recline.Model.ObjectState(c)
        },
        events: {
            "click .column-header-menu .data-table-menu li a": "onColumnHeaderClick",
            "click .row-header-menu": "onRowHeaderClick",
            "click .root-header-menu": "onRootHeaderClick",
            "click .data-table-menu li a": "onMenuClick"
        },
        onColumnHeaderClick: function(b) {
            this.tempState.currentColumn = a(b.target).closest(".column-header").attr("data-field")
        },
        onRowHeaderClick: function(b) {
            this.tempState.currentRow = a(b.target).parents("tr:first").attr("data-id")
        },
        onRootHeaderClick: function() {
            var b = '         {{#columns}}         <li><a data-action="showColumn" data-column="{{.}}" href="JavaScript:void(0);">Show column: {{.}}</a></li>         {{/columns}}',
                c = a.mustache(b, {
                    columns: this.state.get("hiddenFields")
                });
            this.el.find(".root-header-menu .dropdown-menu").html(c)
        },
        onMenuClick: function(c) {
            var d = this;
            c.preventDefault();
            var e = {
                bulkEdit: function() {
                    d.showTransformColumnDialog("bulkEdit", {
                        name: d.tempState.currentColumn
                    })
                },
                facet: function() {
                    d.model.queryState.addFacet(d.tempState.currentColumn)
                },
                facet_histogram: function() {
                    d.model.queryState.addHistogramFacet(d.tempState.currentColumn)
                },
                filter: function() {
                    d.model.queryState.addTermFilter(d.tempState.currentColumn, "")
                },
                transform: function() {
                    d.showTransformDialog("transform")
                },
                sortAsc: function() {
                    d.setColumnSort("asc")
                },
                sortDesc: function() {
                    d.setColumnSort("desc")
                },
                hideColumn: function() {
                    d.hideColumn()
                },
                showColumn: function() {
                    d.showColumn(c)
                },
                deleteRow: function() {
                    var a = _.find(d.model.currentDocuments.models, function(a) {
                        return a.id == d.tempState.currentRow
                    });
                    a.destroy().then(function() {
                        d.model.currentDocuments.remove(a), b.notify("Row deleted successfully")
                    }).fail(function(a) {
                        b.notify("Errorz! " + a)
                    })
                }
            };
            e[a(c.target).attr("data-action")]()
        },
        showTransformColumnDialog: function() {
            var c = a(".dialog-content");
            util.show("dialog");
            var d = new b.ColumnTransform({
                model: this.model
            });
            d.state = this.tempState, d.render(), c.empty(), c.append(d.el), util.observeExit(c, function() {
                util.hide("dialog")
            }), a(".dialog").draggable({
                handle: ".dialog-header",
                cursor: "move"
            })
        },
        showTransformDialog: function() {
            var b = a(".dialog-content");
            util.show("dialog");
            var c = new recline.View.DataTransform({});
            c.render(), b.empty(), b.append(c.el), util.observeExit(b, function() {
                util.hide("dialog")
            }), a(".dialog").draggable({
                handle: ".dialog-header",
                cursor: "move"
            })
        },
        setColumnSort: function(a) {
            var b = [{}];
            b[0][this.tempState.currentColumn] = {
                order: a
            }, this.model.query({
                sort: b
            })
        },
        hideColumn: function() {
            var a = this.state.get("hiddenFields");
            a.push(this.tempState.currentColumn), this.state.set({
                hiddenFields: a
            }), this.state.trigger("change"), this.render()
        },
        showColumn: function(b) {
            var c = _.without(this.state.get("hiddenFields"), a(b.target).data("column"));
            this.state.set({
                hiddenFields: c
            }), this.render()
        },
        template: '     <table class="recline-grid table-striped table-condensed" cellspacing="0">       <thead>         <tr>           {{#notEmpty}}             <th class="column-header">               <div class="btn-group root-header-menu">                 <a class="btn dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></a>                 <ul class="dropdown-menu data-table-menu">                 </ul>               </div>               <span class="column-header-name"></span>             </th>           {{/notEmpty}}           {{#fields}}             <th class="column-header {{#hidden}}hidden{{/hidden}}" data-field="{{id}}">               <div class="btn-group column-header-menu">                 <a class="btn dropdown-toggle" data-toggle="dropdown"><i class="icon-cog"></i><span class="caret"></span></a>                 <ul class="dropdown-menu data-table-menu pull-right">                   <li><a data-action="facet" href="JavaScript:void(0);">Term Facet</a></li>                   <li><a data-action="facet_histogram" href="JavaScript:void(0);">Date Histogram Facet</a></li>                   <li><a data-action="filter" href="JavaScript:void(0);">Text Filter</a></li>                   <li class="divider"></li>                   <li><a data-action="sortAsc" href="JavaScript:void(0);">Sort ascending</a></li>                   <li><a data-action="sortDesc" href="JavaScript:void(0);">Sort descending</a></li>                   <li class="divider"></li>                   <li><a data-action="hideColumn" href="JavaScript:void(0);">Hide this column</a></li>                   <li class="divider"></li>                   <li class="write-op"><a data-action="bulkEdit" href="JavaScript:void(0);">Transform...</a></li>                 </ul>               </div>               <span class="column-header-name">{{label}}</span>             </th>           {{/fields}}         </tr>       </thead>       <tbody></tbody>     </table>   ',
        toTemplateJSON: function() {
            var a = this.model.toJSON();
            return a.notEmpty = this.fields.length > 0, a.fields = _.map(this.fields, function(a) {
                return a.toJSON()
            }), a
        },
        render: function() {
            var c = this;
            this.fields = this.model.fields.filter(function(a) {
                return -1 == _.indexOf(c.state.get("hiddenFields"), a.id)
            });
            var d = a.mustache(this.template, this.toTemplateJSON());
            return this.el.html(d), this.model.currentDocuments.forEach(function(d) {
                var e = a("<tr />");
                c.el.find("tbody").append(e);
                var f = new b.GridRow({
                    model: d,
                    el: e,
                    fields: c.fields
                });
                f.render()
            }), this.el.toggleClass("no-hidden", 0 === c.state.get("hiddenFields").length), this
        }
    }), b.GridRow = Backbone.View.extend({
        initialize: function(b) {
            _.bindAll(this, "render"), this._fields = b.fields, this.el = a(this.el), this.model.bind("change", this.render)
        },
        template: '       <td>         <div class="btn-group row-header-menu">           <a class="btn dropdown-toggle" data-toggle="dropdown"><span class="caret"></span></a>           <ul class="dropdown-menu data-table-menu">             <li class="write-op"><a data-action="deleteRow" href="JavaScript:void(0);">Delete this row</a></li>           </ul>         </div>       </td>       {{#cells}}       <td data-field="{{field}}">         <div class="data-table-cell-content">           <a href="javascript:{}" class="data-table-cell-edit" title="Edit this cell">&nbsp;</a>           <div class="data-table-cell-value">{{{value}}}</div>         </div>       </td>       {{/cells}}     ',
        events: {
            "click .data-table-cell-edit": "onEditClick",
            "click .data-table-cell-editor .okButton": "onEditorOK",
            "click .data-table-cell-editor .cancelButton": "onEditorCancel"
        },
        toTemplateJSON: function() {
            var a = this.model,
                b = this._fields.map(function(b) {
                    return {
                        field: b.id,
                        value: a.getFieldValue(b)
                    }
                });
            return {
                id: this.id,
                cells: b
            }
        },
        render: function() {
            this.el.attr("data-id", this.model.id);
            var b = a.mustache(this.template, this.toTemplateJSON());
            return a(this.el).html(b), this
        },
        onEditClick: function(b) {
            var c = this.el.find(".data-table-cell-editor-editor");
            c.length > 0 && c.parents(".data-table-cell-value").html(c.text()).siblings(".data-table-cell-edit").removeClass("hidden"), a(b.target).addClass("hidden");
            var d = a(b.target).siblings(".data-table-cell-value");
            d.data("previousContents", d.text()), util.render("cellEditor", d, {
                value: d.text()
            })
        },
        onEditorOK: function(c) {
            var d = a(c.target);
            d.parents("tr").attr("data-id");
            var e = d.parents("td").attr("data-field"),
                f = d.parents(".data-table-cell-editor").find(".data-table-cell-editor-editor").val(),
                g = {};
            g[e] = f, this.model.set(g), b.notify("Updating row...", {
                loader: !0
            }), this.model.save().then(function() {
                b.notify("Row updated successfully", {
                    category: "success"
                })
            }).fail(function() {
                b.notify("Error saving row", {
                    category: "danger",
                    persist: !0
                })
            })
        },
        onEditorCancel: function(b) {
            var c = a(b.target).parents(".data-table-cell-value");
            c.html(c.data("previousContents")).siblings(".data-table-cell-edit").removeClass("hidden")
        }
    })
}(jQuery, recline.View), this.recline = this.recline || {}, this.recline.View = this.recline.View || {},
function(a, b) {
    b.Map = Backbone.View.extend({
        tagName: "div",
        className: "recline-map",
        template: '   <div class="editor">     <form class="form-stacked">       <div class="clearfix">         <div class="editor-field-type">             <label class="radio">               <input type="radio" id="editor-field-type-latlon" name="editor-field-type" value="latlon" checked="checked"/>               Latitude / Longitude fields</label>             <label class="radio">               <input type="radio" id="editor-field-type-geom" name="editor-field-type" value="geom" />               GeoJSON field</label>         </div>         <div class="editor-field-type-latlon">           <label>Latitude field</label>           <div class="input editor-lat-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>           <label>Longitude field</label>           <div class="input editor-lon-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>         <div class="editor-field-type-geom" style="display:none">           <label>Geometry field (GeoJSON)</label>           <div class="input editor-geom-field">             <select>             <option value=""></option>             {{#fields}}             <option value="{{id}}">{{label}}</option>             {{/fields}}             </select>           </div>         </div>       </div>       <div class="editor-buttons">         <button class="btn editor-update-map">Update</button>       </div>       <div class="editor-options" >         <label class="checkbox">           <input type="checkbox" id="editor-auto-zoom" checked="checked" />           Auto zoom to features</label>       </div>       <input type="hidden" class="editor-id" value="map-1" />       </div>     </form>   </div> <div class="panel map"> </div> ',
        latitudeFieldNames: ["lat", "latitude"],
        longitudeFieldNames: ["lon", "longitude"],
        geometryFieldNames: ["geom", "the_geom", "geometry", "spatial", "location"],
        events: {
            "click .editor-update-map": "onEditorSubmit",
            "change .editor-field-type": "onFieldTypeChange",
            "change #editor-auto-zoom": "onAutoZoomChange"
        },
        initialize: function(b) {
            var c = this;
            this.el = a(this.el), this.model.fields.bind("change", function() {
                c._setupGeometryField()
            }), this.model.fields.bind("add", this.render), this.model.fields.bind("reset", function() {
                c._setupGeometryField(), c.render()
            }), this.model.currentDocuments.bind("add", function(a) {
                c.redraw("add", a)
            }), this.model.currentDocuments.bind("change", function(a) {
                c.redraw("remove", a), c.redraw("add", a)
            }), this.model.currentDocuments.bind("remove", function(a) {
                c.redraw("remove", a)
            }), this.model.currentDocuments.bind("reset", function() {
                c.redraw("reset")
            }), this.bind("view:show", function() {
                c.map && (c.map.invalidateSize(), c._zoomPending && c.autoZoom && (c._zoomToFeatures(), c._zoomPending = !1)), c.visible = !0
            }), this.bind("view:hide", function() {
                c.visible = !1
            });
            var d = _.extend({
                geomField: null,
                lonField: null,
                latField: null
            }, b.state);
            this.state = new recline.Model.ObjectState(d), this.autoZoom = !0, this.mapReady = !1, this.render()
        },
        render: function() {
            var b = this;
            return htmls = a.mustache(this.template, this.model.toTemplateJSON()), a(this.el).html(htmls), this.$map = this.el.find(".panel.map"), this.geomReady && this.model.fields.length && (this.state.get("geomField") ? (this._selectOption("editor-geom-field", this.state.get("geomField")), a("#editor-field-type-geom").attr("checked", "checked").change()) : (this._selectOption("editor-lon-field", this.state.get("lonField")), this._selectOption("editor-lat-field", this.state.get("latField")), a("#editor-field-type-latlon").attr("checked", "checked").change())), this.model.bind("query:done", function() {
                b.geomReady || b._setupGeometryField(), b.mapReady || b._setupMap(), b.redraw()
            }), this
        },
        redraw: function(a, b) {
            a = a || "refresh", this.geomReady && this.mapReady && ("reset" == a ? this.features.clearLayers() : "add" == a && b ? this._add(b) : "remove" == a && b ? this._remove(b) : "refresh" == a && (this.features.clearLayers(), this._add(this.model.currentDocuments.models)), "reset" != a && this.autoZoom && (this.visible ? this._zoomToFeatures() : this._zoomPending = !0))
        },
        onEditorSubmit: function(b) {
            return b.preventDefault(), a("#editor-field-type-geom").attr("checked") ? this.state.set({
                geomField: a(".editor-geom-field > select > option:selected").val(),
                lonField: null,
                latField: null
            }) : this.state.set({
                geomField: null,
                lonField: a(".editor-lon-field > select > option:selected").val(),
                latField: a(".editor-lat-field > select > option:selected").val()
            }), this.geomReady = this.state.get("geomField") || this.state.get("latField") && this.state.get("lonField"), this.redraw(), !1
        },
        onFieldTypeChange: function(b) {
            "geom" == b.target.value ? (a(".editor-field-type-geom").show(), a(".editor-field-type-latlon").hide()) : (a(".editor-field-type-geom").hide(), a(".editor-field-type-latlon").show())
        },
        onAutoZoomChange: function() {
            this.autoZoom = !this.autoZoom
        },
        _add: function(a) {
            var c = this;
            a instanceof Array || (a = [a]);
            var d = 0,
                e = 0;
            _.every(a, function(a) {
                d += 1;
                var f = c._getGeometryFromDocument(a);
                if ("undefined" == typeof f || null === f) return !0;
                if (f instanceof Object) {
                    html = "";
                    for (key in a.attributes) c.state.get("geomField") && key == c.state.get("geomField") || (html += "<div><strong>" + key + "</strong>: " + a.attributes[key] + "</div>");
                    f.properties = {
                        popupContent: html
                    }, f.properties.cid = a.cid;
                    try {
                        c.features.addGeoJSON(f)
                    } catch (g) {
                        e += 1;
                        var h = "Wrong geometry value";
                        g.message && (h += " (" + g.message + ")"), 10 >= e && b.notify(h, {
                            category: "danger"
                        })
                    }
                } else e += 1, 10 >= e && b.notify("Wrong geometry value", {
                    category: "danger"
                });
                return !0
            })
        },
        _remove: function(a) {
            var b = this;
            a instanceof Array || (a = [a]), _.each(a, function(a) {
                for (key in b.features._layers) b.features._layers[key].cid == a.cid && b.features.removeLayer(b.features._layers[key])
            })
        },
        _getGeometryFromDocument: function(b) {
            if (this.geomReady) {
                if (this.state.get("geomField")) {
                    var c = b.get(this.state.get("geomField"));
                    return "string" == typeof c ? a.parseJSON(c) : c
                }
                if (this.state.get("lonField") && this.state.get("latField")) {
                    var d = b.get(this.state.get("lonField")),
                        e = b.get(this.state.get("latField"));
                    if (!isNaN(parseFloat(d)) && !isNaN(parseFloat(e))) return {
                        type: "Point",
                        coordinates: [d, e]
                    }
                }
                return null
            }
        },
        _setupGeometryField: function() {
            this.geomReady = this.state.get("geomField") || this.state.get("latField") && this.state.get("lonField"), this.geomReady || (this.state.set({
                geomField: this._checkField(this.geometryFieldNames),
                latField: this._checkField(this.latitudeFieldNames),
                lonField: this._checkField(this.longitudeFieldNames)
            }), this.geomReady = this.state.get("geomField") || this.state.get("latField") && this.state.get("lonField"))
        },
        _checkField: function(a) {
            for (var b = this.model.fields.pluck("id"), c = 0; c < a.length; c++)
                for (var d = 0; d < b.length; d++)
                    if (b[d].toLowerCase() == a[c].toLowerCase()) return b[d];
            return null
        },
        _zoomToFeatures: function() {
            var a = this.features.getBounds();
            a ? this.map.fitBounds(a) : this.map.setView(new L.LatLng(0, 0), 2)
        },
        _setupMap: function() {
            this.map = new L.Map(this.$map.get(0));
            var a = "http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png",
                b = 'Map data &copy; 2011 OpenStreetMap contributors, Tiles Courtesy of <a href="http://www.mapquest.com/" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png">',
                c = new L.TileLayer(a, {
                    maxZoom: 18,
                    attribution: b,
                    subdomains: "1234"
                });
            this.map.addLayer(c), this.features = new L.GeoJSON, this.features.on("featureparse", function(a) {
                a.properties && a.properties.popupContent && a.layer.bindPopup(a.properties.popupContent), a.properties && a.properties.cid && (a.layer.cid = a.properties.cid)
            }), this.features.getBounds = function() {
                var a = new L.LatLngBounds;
                return this._iterateLayers(function(b) {
                    b instanceof L.Marker ? a.extend(b.getLatLng()) : b.getBounds && (a.extend(b.getBounds().getNorthEast()), a.extend(b.getBounds().getSouthWest()))
                }, this), "undefined" != typeof a.getNorthEast() ? a : null
            }, this.map.addLayer(this.features), this.map.setView(new L.LatLng(0, 0), 2), this.mapReady = !0
        },
        _selectOption: function(b, c) {
            var d = a("." + b + " > select > option");
            d && d.each(function() {
                return this.value == c ? (a(this).attr("selected", "selected"), !1) : void 0
            })
        }
    })
}(jQuery, recline.View), this.recline = this.recline || {}, this.recline.View = this.recline.View || {},
function(a, b) {
    b.DataTransform = Backbone.View.extend({
        className: "transform-view",
        template: '     <div class="dialog-header">       Recursive transform on all rows     </div>     <div class="dialog-body">       <div class="grid-layout layout-full">         <p class="info">Traverse and transform objects by visiting every node on a recursive walk using <a href="https://github.com/substack/js-traverse">js-traverse</a>.</p>         <table>         <tbody>         <tr>           <td colspan="4">             <div class="grid-layout layout-tight layout-full">               <table rows="4" cols="4">               <tbody>               <tr style="vertical-align: bottom;">                 <td colspan="4">                   Expression                 </td>               </tr>               <tr>                 <td colspan="3">                   <div class="input-container">                     <textarea class="expression-preview-code"></textarea>                   </div>                 </td>                 <td class="expression-preview-parsing-status" width="150" style="vertical-align: top;">                   No syntax error.                 </td>               </tr>               <tr>                 <td colspan="4">                   <div id="expression-preview-tabs" class="refine-tabs ui-tabs ui-widget ui-widget-content ui-corner-all">                     <span>Preview</span>                     <div id="expression-preview-tabs-preview" class="ui-tabs-panel ui-widget-content ui-corner-bottom">                       <div class="expression-preview-container" style="width: 652px; ">                       </div>                     </div>                   </div>                 </td>               </tr>               </tbody>               </table>             </div>           </td>         </tr>         </tbody>         </table>       </div>     </div>     <div class="dialog-footer">       <button class="okButton button">&nbsp;&nbsp;Update All&nbsp;&nbsp;</button>       <button class="cancelButton button">Cancel</button>     </div>   ',
        initialize: function() {
            this.el = a(this.el)
        },
        render: function() {
            this.el.html(this.template)
        }
    }), b.ColumnTransform = Backbone.View.extend({
        className: "transform-column-view",
        template: '     <div class="dialog-header">       Functional transform on column {{name}}     </div>     <div class="dialog-body">       <div class="grid-layout layout-tight layout-full">         <table>         <tbody>         <tr>           <td colspan="4">             <div class="grid-layout layout-tight layout-full">               <table rows="4" cols="4">               <tbody>               <tr style="vertical-align: bottom;">                 <td colspan="4">                   Expression                 </td>               </tr>               <tr>                 <td colspan="3">                   <div class="input-container">                     <textarea class="expression-preview-code"></textarea>                   </div>                 </td>                 <td class="expression-preview-parsing-status" width="150" style="vertical-align: top;">                   No syntax error.                 </td>               </tr>               <tr>                 <td colspan="4">                   <div id="expression-preview-tabs" class="refine-tabs ui-tabs ui-widget ui-widget-content ui-corner-all">                     <span>Preview</span>                     <div id="expression-preview-tabs-preview" class="ui-tabs-panel ui-widget-content ui-corner-bottom">                       <div class="expression-preview-container" style="width: 652px; ">                       </div>                     </div>                   </div>                 </td>               </tr>               </tbody>               </table>             </div>           </td>         </tr>         </tbody>         </table>       </div>     </div>     <div class="dialog-footer">       <button class="okButton btn primary">&nbsp;&nbsp;Update All&nbsp;&nbsp;</button>       <button class="cancelButton btn danger">Cancel</button>     </div>   ',
        events: {
            "click .okButton": "onSubmit",
            "keydown .expression-preview-code": "onEditorKeydown"
        },
        initialize: function() {
            this.el = a(this.el)
        },
        render: function() {
            var b = a.mustache(this.template, {
                name: this.state.currentColumn
            });
            this.el.html(b);
            var c = this.el.find(".expression-preview-code");
            c.val("function(doc) {\n  doc['" + this.state.currentColumn + "'] = doc['" + this.state.currentColumn + "'];\n  return doc;\n}"), c.focus().get(0).setSelectionRange(18, 18), c.keydown()
        },
        onSubmit: function() {
            function a() {
                h += -1, 0 === h && (b.notify(g.length + " documents updated successfully"), alert("WARNING: We have only updated the docs in this view. (Updating of all docs not yet implemented!)"), c.remove())
            }
            var c = this,
                d = this.el.find(".expression-preview-code").val(),
                e = costco.evalFunction(d);
            if (e.errorMessage) return b.notify("Error with function! " + e.errorMessage), void 0;
            util.hide("dialog"), b.notify("Updating all visible docs. This could take a while...", {
                persist: !0,
                loader: !0
            });
            var f = c.model.currentDocuments.map(function(a) {
                return a.toJSON()
            }),
                g = costco.mapDocs(f, e).edited,
                h = g.length;
            _.each(g, function(b) {
                var d = c.model.currentDocuments.get(b.id);
                d.set(b), d.save().then(a).fail(a)
            })
        },
        onEditorKeydown: function(a) {
            var b = this;
            window.setTimeout(function() {
                var c = b.el.find(".expression-preview-parsing-status"),
                    d = costco.evalFunction(a.target.value);
                if (d.errorMessage) c.text(d.errorMessage);
                else {
                    c.text("No syntax error.");
                    var e = b.model.currentDocuments.map(function(a) {
                        return a.toJSON()
                    }),
                        f = costco.previewTransform(e, d, b.state.currentColumn);
                    util.render("editPreview", "expression-preview-container", {
                        rows: f
                    })
                }
            }, 1, !0)
        }
    })
}(jQuery, recline.View), this.recline = this.recline || {}, this.recline.View = this.recline.View || {},
function(a, b) {
    b.DataExplorer = Backbone.View.extend({
        template: '   <div class="recline-data-explorer">     <div class="alert-messages"></div>         <div class="header">       <ul class="navigation">         {{#views}}         <li><a href="#{{id}}" data-view="{{id}}" class="btn">{{label}}</a>         {{/views}}       </ul>       <div class="recline-results-info">         Results found <span class="doc-count">{{docCount}}</span>       </div>       <div class="menu-right">         <a href="#" class="btn" data-action="filters">Filters</a>         <a href="#" class="btn" data-action="facets">Facets</a>       </div>       <div class="query-editor-here" style="display:inline;"></div>       <div class="clearfix"></div>     </div>     <div class="data-view-container"></div>     <div class="dialog-overlay" style="display: none; z-index: 101; ">&nbsp;</div>     <div class="dialog ui-draggable" style="display: none; z-index: 102; top: 101px; ">       <div class="dialog-frame" style="width: 700px; visibility: visible; ">         <div class="dialog-content dialog-border"></div>       </div>     </div>   </div>   ',
        events: {
            "click .menu-right a": "_onMenuClick",
            "click .navigation a": "_onSwitchView"
        },
        initialize: function(c) {
            var d = this;
            this.el = a(this.el), this._setupState(c.state), this.pageViews = c.views ? c.views : [{
                id: "grid",
                label: "Grid",
                view: new b.Grid({
                    model: this.model,
                    state: this.state.get("view-grid")
                })
            }, {
                id: "graph",
                label: "Graph",
                view: new b.Graph({
                    model: this.model,
                    state: this.state.get("view-graph")
                })
            }, {
                id: "map",
                label: "Map",
                view: new b.Map({
                    model: this.model,
                    state: this.state.get("view-map")
                })
            }], this.render(), this._bindStateChanges(), this.state.get("readOnly") && this.setReadOnly(), this.state.get("currentView") ? this.updateNav(this.state.get("currentView")) : this.updateNav(this.pageViews[0].id), this.router = new Backbone.Router, this.setupRouting(), this.model.bind("query:start", function() {
                b.notify("Učitavanje podataka...", {
                    loader: !0
                })
            }), this.model.bind("query:done", function() {
                b.clearNotifications(), d.el.find(".doc-count").text(d.model.docCount || "Unknown"), b.notify("Podaci su uspješno učitani...", {
                    category: "success"
                });
                var a = b.parseHashQueryString();
                a.reclineQuery = JSON.stringify(d.model.queryState.toJSON()), b.getNewHashForQueryString(a)
            }), this.model.bind("query:fail", function(a) {
                b.clearNotifications();
                var c = "";
                "string" == typeof a ? c = a : "object" == typeof a ? (a.title && (c = a.title + ": "), a.message && (c += a.message)) : c = "There was an error querying the backend", b.notify(c, {
                    category: "danger",
                    persist: !0
                })
            }), this.model.fetch().done(function() {
                d.model.query(d.state.get("query"))
            }).fail(function(a) {
                b.notify(a.message, {
                    category: "danger",
                    persist: !0
                })
            })
        },
        setReadOnly: function() {
            this.el.addClass("recline-read-only")
        },
        render: function() {
            var c = this.model.toTemplateJSON();
            c.views = this.pageViews;
            var d = a.mustache(this.template, c);
            a(this.el).html(d);
            var e = this.el.find(".data-view-container");
            _.each(this.pageViews, function(a) {
                e.append(a.view.el)
            });
            var f = new b.QueryEditor({
                model: this.model.queryState
            });
            this.el.find(".query-editor-here").append(f.el);
            var g = new b.FilterEditor({
                model: this.model.queryState
            });
            this.$filterEditor = g.el, this.el.find(".header").append(g.el);
            var h = new b.FacetViewer({
                model: this.model
            });
            this.$facetViewer = h.el, this.el.find(".header").append(h.el)
        },
        setupRouting: function() {
            this.router.route(/.*/, "view", function() {})
        },
        updateNav: function(a) {
            this.el.find(".navigation li").removeClass("active"), this.el.find(".navigation li a").removeClass("disabled");
            var b = this.el.find('.navigation li a[data-view="' + a + '"]');
            b.parent().addClass("active"), b.addClass("disabled"), _.each(this.pageViews, function(b) {
                b.id === a ? (b.view.el.show(), b.view.trigger("view:show")) : (b.view.el.hide(), b.view.trigger("view:hide"))
            })
        },
        _onMenuClick: function(b) {
            b.preventDefault();
            var c = a(b.target).attr("data-action");
            "filters" === c ? this.$filterEditor.show() : "facets" === c && this.$facetViewer.show()
        },
        _onSwitchView: function(b) {
            b.preventDefault();
            var c = a(b.target).attr("data-view");
            this.updateNav(c), this.state.set({
                currentView: c
            })
        },
        _setupState: function(a) {
            var c = this,
                d = b.parseHashQueryString(),
                e = d.reclineQuery;
            e = e ? JSON.parse(e) : c.model.queryState.toJSON();
            var f = d["view-graph"] || d.graph;
            f = f ? JSON.parse(f) : {};
            var g = _.extend({
                query: e,
                "view-graph": f,
                backend: this.model.backend.__type__,
                dataset: this.model.toJSON(),
                currentView: null,
                readOnly: !1
            }, a);
            this.state = new recline.Model.ObjectState(g)
        },
        _bindStateChanges: function() {
            var a = this;
            this.model.queryState.bind("change", function() {
                a.state.set({
                    query: a.model.queryState.toJSON()
                })
            }), _.each(this.pageViews, function(b) {
                if (b.view.state && b.view.state.bind) {
                    var c = {};
                    c["view-" + b.id] = b.view.state.toJSON(), a.state.set(c), b.view.state.bind("change", function() {
                        var c = {};
                        c["view-" + b.id] = b.view.state.toJSON(), a.state.set(c, {
                            silent: !0
                        }), a.state.trigger("change")
                    })
                }
            })
        }
    }), b.DataExplorer.restore = function(a) {
        var c = recline.Model.Dataset.restore(a),
            d = new b.DataExplorer({
                model: c,
                state: a
            });
        return d
    }, b.QueryEditor = Backbone.View.extend({
        className: "recline-query-editor",
        template: '     <form action="" method="GET" class="form-inline">       <div class="input-prepend text-query">         <span class="add-on"><i class="icon-search"></i></span>         <input type="text" name="q" value="{{q}}" class="span2" placeholder="Search data ..." class="search-query" />       </div>       <div class="pagination">         <ul>           <li class="prev action-pagination-update"><a href="">&laquo;</a></li>           <li class="active"><a><input name="from" type="text" value="{{from}}" /> &ndash; <input name="to" type="text" value="{{to}}" /> </a></li>           <li class="next action-pagination-update"><a href="">&raquo;</a></li>         </ul>       </div>       <button type="submit" class="btn">Go &raquo;</button>     </form>   ',
        events: {
            "submit form": "onFormSubmit",
            "click .action-pagination-update": "onPaginationUpdate"
        },
        initialize: function() {
            _.bindAll(this, "render"), this.el = a(this.el), this.model.bind("change", this.render), this.render()
        },
        onFormSubmit: function(a) {
            a.preventDefault();
            var b = this.el.find(".text-query input").val(),
                c = parseInt(this.el.find('input[name="from"]').val()),
                d = parseInt(this.el.find('input[name="to"]').val()) - c;
            this.model.set({
                size: d,
                from: c,
                q: b
            })
        },
        onPaginationUpdate: function(b) {
            b.preventDefault();
            var c = a(b.target),
                d = 0;
            d = c.parent().hasClass("prev") ? this.model.get("from") - Math.max(0, this.model.get("size")) : this.model.get("from") + this.model.get("size"), this.model.set({
                from: d
            })
        },
        render: function() {
            var b = this.model.toJSON();
            b.to = this.model.get("from") + this.model.get("size");
            var c = a.mustache(this.template, b);
            this.el.html(c)
        }
    }), b.FilterEditor = Backbone.View.extend({
        className: "recline-filter-editor well",
        template: '     <a class="close js-hide" href="#">&times;</a>     <div class="row filters">       <div class="span1">         <h3>Filters</h3>       </div>       <div class="span11">         <form class="form-horizontal">           <div class="row">             <div class="span6">               {{#termFilters}}               <div class="control-group filter-term filter" data-filter-id={{id}}>                 <label class="control-label" for="">{{label}}</label>                 <div class="controls">                   <div class="input-append">                     <input type="text" value="{{value}}" name="{{fieldId}}" class="span4" data-filter-field="{{fieldId}}" data-filter-id="{{id}}" data-filter-type="term" />                     <a class="btn js-remove-filter"><i class="icon-remove"></i></a>                   </div>                 </div>               </div>               {{/termFilters}}             </div>           <div class="span4">             <p>To add a filter use the column menu in the grid view.</p>             <button type="submit" class="btn">Update</button>           </div>         </form>       </div>     </div>   ',
        events: {
            "click .js-hide": "onHide",
            "click .js-remove-filter": "onRemoveFilter",
            "submit form": "onTermFiltersUpdate"
        },
        initialize: function() {
            this.el = a(this.el), _.bindAll(this, "render"), this.model.bind("change", this.render), this.model.bind("change:filters:new-blank", this.render), this.render()
        },
        render: function() {
            var b = a.extend(!0, {}, this.model.toJSON());
            b.filters = _.map(b.filters, function(a, b) {
                return a.id = b, a
            }), b.termFilters = _.filter(b.filters, function(a) {
                return void 0 !== a.term
            }), b.termFilters = _.map(b.termFilters, function(a) {
                var b = _.keys(a.term)[0];
                return {
                    id: a.id,
                    fieldId: b,
                    label: b,
                    value: a.term[b]
                }
            });
            var c = a.mustache(this.template, b);
            this.el.html(c), this.model.get("filters").length > 0 ? this.el.show() : this.el.hide()
        },
        onHide: function(a) {
            a.preventDefault(), this.el.hide()
        },
        onRemoveFilter: function(b) {
            b.preventDefault();
            var c = a(b.target),
                d = c.closest(".filter").attr("data-filter-id");
            this.model.removeFilter(d)
        },
        onTermFiltersUpdate: function(b) {
            var c = this;
            b.preventDefault();
            var d = c.model.get("filters"),
                e = a(b.target);
            _.each(e.find("input"), function(b) {
                var c = a(b),
                    e = parseInt(c.attr("data-filter-id")),
                    f = c.val(),
                    g = c.attr("data-filter-field");
                d[e].term[g] = f
            }), c.model.set({
                filters: d
            }), c.model.trigger("change")
        }
    }), b.FacetViewer = Backbone.View.extend({
        className: "recline-facet-viewer well",
        template: '     <a class="close js-hide" href="#">&times;</a>     <div class="facets row">       <div class="span1">         <h3>Facets</h3>       </div>       {{#facets}}       <div class="facet-summary span2 dropdown" data-facet="{{id}}">         <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-chevron-down"></i> {{id}} {{label}}</a>         <ul class="facet-items dropdown-menu">         {{#terms}}           <li><a class="facet-choice js-facet-filter" data-value="{{term}}">{{term}} ({{count}})</a></li>         {{/terms}}         {{#entries}}           <li><a class="facet-choice js-facet-filter" data-value="{{time}}">{{term}} ({{count}})</a></li>         {{/entries}}         </ul>       </div>       {{/facets}}     </div>   ',
        events: {
            "click .js-hide": "onHide",
            "click .js-facet-filter": "onFacetFilter"
        },
        initialize: function() {
            _.bindAll(this, "render"), this.el = a(this.el), this.model.facets.bind("all", this.render), this.model.fields.bind("all", this.render), this.render()
        },
        render: function() {
            var b = {
                facets: this.model.facets.toJSON(),
                fields: this.model.fields.toJSON()
            };
            b.facets = _.map(b.facets, function(a) {
                return "date_histogram" === a._type && (a.entries = _.map(a.entries, function(a) {
                    return a.term = new Date(a.time).toDateString(), a
                })), a
            });
            var c = a.mustache(this.template, b);
            this.el.html(c), this.model.facets.length > 0 ? this.el.show() : this.el.hide()
        },
        onHide: function(a) {
            a.preventDefault(), this.el.hide()
        },
        onFacetFilter: function(b) {
            var c = a(b.target),
                d = c.closest(".facet-summary").attr("data-facet"),
                e = c.attr("data-value");
            this.model.queryState.addTermFilter(d, e)
        }
    });
    var c = /^([^?]+)(\?.*)?/;
    b.parseHashUrl = function(a) {
        var b = c.exec(a);
        return null === b ? {} : {
            path: b[1],
            query: b[2] || ""
        }
    }, b.parseQueryString = function(a) {
        if (!a) return {};
        var b, c = {}, d = function(a) {
                return unescape(a.replace(/\+/g, " "))
            }, e = /([^&=]+)=?([^&]*)/g;
        for (a && a.length && "?" === a[0] && (a = a.slice(1)); b = e.exec(a);) c[d(b[1])] = d(b[2]);
        return c
    }, b.parseHashQueryString = function() {
        return q = b.parseHashUrl(window.location.hash).query, b.parseQueryString(q)
    }, b.composeQueryString = function(b) {
        var c = "?",
            d = [];
        return a.each(b, function(a, b) {
            "object" == typeof b && (b = JSON.stringify(b)), d.push(a + "=" + b)
        }), c += d.join("&")
    }, b.getNewHashForQueryString = function(a) {
        var c = b.composeQueryString(a);
        return window.location.hash ? window.location.hash.split("?")[0].slice(1) + c : c
    }, b.setHashQueryString = function(a) {
        window.location.hash = b.getNewHashForQueryString(a)
    }, b.notify = function(b, c) {
        c || (c = {});
        var d = _.extend({
            msg: b,
            category: "warning"
        }, c),
            e = '     <div class="alert alert-{{category}} fade in" data-alert="alert"><a class="close" data-dismiss="alert" href="#">×</a>       {{msg}}         {{#loader}}         <span class="notification-loader">&nbsp;</span>         {{/loader}}     </div>',
            f = a.mustache(e, d);
        f = a(f).appendTo(a(".recline-data-explorer .alert-messages")), c.persist || setTimeout(function() {
            a(f).fadeOut(1e3, function() {
                a(this).remove()
            })
        }, 1e3)
    }, b.clearNotifications = function() {
        var b = a(".recline-data-explorer .alert-messages .alert");
        b.remove()
    }
}(jQuery, recline.View), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    Backbone.sync = function(a, b, c) {
        return b.backend.sync(a, b, c)
    }, b.Base = Backbone.Model.extend({
        __type__: "base",
        readonly: !0,
        sync: function() {},
        query: function() {},
        _makeRequest: function(b) {
            var c = this.get("headers"),
                d = {};
            c && (d = {
                beforeSend: function(a) {
                    _.each(c, function(b, c) {
                        a.setRequestHeader(c, b)
                    })
                }
            });
            var e = _.extend(d, b);
            return a.ajax(e)
        },
        _docsToQueryResult: function(a) {
            var b = _.map(a, function(a) {
                return {
                    _source: a
                }
            });
            return {
                total: null,
                hits: b
            }
        },
        _wrapInTimeout: function(b) {
            var c = a.Deferred(),
                d = 1e4,
                e = setTimeout(function() {
                    c.reject({
                        message: "Server nije odgovorio " + d / 1e3 + " sekundi"
                    })
                }, d);
            return b.done(function(a) {
                clearTimeout(e), c.resolve(a)
            }).fail(function(a) {
                clearTimeout(e), c.reject(a)
            }), c.promise()
        }
    })
}(jQuery, this.recline.Backend), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    b.DataProxy = b.Base.extend({
        __type__: "dataproxy",
        readonly: !0,
        defaults: {
            dataproxy_url: "/data/preview/"
        },
        sync: function(b, c) {
            if ("read" === b) {
                if ("Dataset" == c.__type__) {
                    var d = a.Deferred();
                    return d.resolve(c), d.promise()
                }
            } else alert("Poslužitelj podržava samo čitanje.")
        },
        query: function(b, c) {
            var d = this,
                e = this.get("dataproxy_url") + b.resource_id,
                f = {
                    "max-results": c.size,
                    type: b.get("format")
                }, g = a.ajax({
                    url: e,
                    data: f,
                    dataType: "json"
                }),
                h = a.Deferred();
            return this._wrapInTimeout(g).done(function(c) {
                c.error && h.reject(c.error), c.extra_text && a("#ckanext-datapreview-extra").html(c.extra_text), c.archived && a("#ckanext-datapreview-source").html(c.archived);
                var e = {};
                _.map(c.fields, function(a, b) {
                    a in e ? (e[a] += 1, c.fields[b] = a + "(" + e[a] + ")") : e[a] = 1
                }), b.fields.reset(_.map(c.fields, function(a) {
                    return {
                        id: a
                    }
                }));
                var f = _.map(c.data, function(a) {
                    var b = {};
                    return _.each(c.fields, function(c, d) {
                        b[c] = a[d]
                    }), b
                });
                h.resolve(d._docsToQueryResult(f))
            }).fail(function(a) {
                h.reject(a)
            }), h.promise()
        }
    })
}(jQuery, this.recline.Backend), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    b.ElasticSearch = b.Base.extend({
        __type__: "elasticsearch",
        readonly: !1,
        sync: function(b, c) {
            var d = this;
            if ("read" === b) {
                if ("Dataset" == c.__type__) {
                    var e = d._getESUrl(c) + "/_mapping",
                        f = this._makeRequest({
                            url: e,
                            dataType: "jsonp"
                        }),
                        g = a.Deferred();
                    return this._wrapInTimeout(f).done(function(a) {
                        var b = _.keys(a)[0],
                            d = _.map(a[b].properties, function(a, b) {
                                return a.id = b, a
                            });
                        c.fields.reset(d), g.resolve(c, f)
                    }).fail(function(a) {
                        g.reject(a)
                    }), g.promise()
                }
                if ("Document" == c.__type__) {
                    var h = this._getESUrl(c.dataset) + "/" + c.id;
                    return this._makeRequest({
                        url: h,
                        dataType: "json"
                    })
                }
            } else if ("update" === b) {
                if ("Document" == c.__type__) return this.upsert(c.toJSON(), this._getESUrl(c.dataset))
            } else if ("delete" === b && "Document" == c.__type__) {
                var i = this._getESUrl(c.dataset);
                return this.delete_(c.id, i)
            }
        },
        upsert: function(a, b) {
            var c = JSON.stringify(a);
            return b = b ? b : this._getESUrl(), a.id && (b += "/" + a.id), this._makeRequest({
                url: b,
                type: "POST",
                data: c,
                dataType: "json"
            })
        },
        delete_: function(a, b) {
            return b = b ? b : this._getESUrl(), b += "/" + a, this._makeRequest({
                url: b,
                type: "DELETE",
                dataType: "json"
            })
        },
        _getESUrl: function(a) {
            if (a) {
                var b = a.get("elasticsearch_url");
                return b ? b : (b = a.get("webstore_url")) ? b : b = a.get("url")
            }
            return this.get("url")
        },
        _normalizeQuery: function(a) {
            var b = a.toJSON ? a.toJSON() : _.extend({}, a);
            return void 0 !== b.q && "" === b.q.trim() && delete b.q, b.q ? (b.query = {
                query_string: {
                    query: b.q
                }
            }, delete b.q) : b.query = {
                match_all: {}
            }, b.filters && b.filters.length && (b.filter || (b.filter = {}), b.filter.and || (b.filter.and = []), b.filter.and = b.filter.and.concat(b.filters)), void 0 !== b.filters && delete b.filters, b
        },
        query: function(b, c) {
            var d = this._normalizeQuery(c),
                e = {
                    source: JSON.stringify(d)
                }, f = this._getESUrl(b),
                g = this._makeRequest({
                    url: f + "/_search",
                    data: e,
                    dataType: "jsonp"
                }),
                h = a.Deferred();
            return g.done(function(a) {
                _.each(a.hits.hits, function(a) {
                    "id" in a._source || !a._id || (a._source.id = a._id)
                }), a.facets && (a.hits.facets = a.facets), h.resolve(a.hits)
            }), h.promise()
        }
    })
}(jQuery, this.recline.Backend), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    b.GDoc = b.Base.extend({
        __type__: "gdoc",
        readonly: !0,
        getUrl: function(a) {
            var b = a.get("url");
            if (-1 != b.indexOf("feeds/list")) return b;
            var c = /.*spreadsheet\/ccc?.*key=([^#?&+]+).*/,
                d = b.match(c);
            if (d) {
                var e = d[1],
                    f = 1,
                    g = "https://spreadsheets.google.com/feeds/list/" + e + "/" + f + "/public/values?alt=json";
                return g
            }
            alert("Failed to extract gdocs key from " + b)
        },
        sync: function(b, c) {
            var d = this;
            if ("read" === b) {
                var e = a.Deferred(),
                    f = this.getUrl(c);
                return a.getJSON(f, function(a) {
                    result = d.gdocsToJavascript(a), c.fields.reset(_.map(result.field, function(a) {
                        return {
                            id: a
                        }
                    })), c._dataCache = result.data, e.resolve(c)
                }), e.promise()
            }
        },
        query: function(b) {
            var c = a.Deferred(),
                d = _.pluck(b.fields.toJSON(), "id"),
                e = _.map(b._dataCache, function(a) {
                    var b = {};
                    return _.each(_.zip(d, a), function(a) {
                        b[a[0]] = a[1]
                    }), b
                });
            return c.resolve(this._docsToQueryResult(e)), c
        },
        gdocsToJavascript: function(b) {
            var c = {};
            arguments.length > 1 && (c = arguments[1]);
            var d = {
                field: [],
                data: []
            }, e = {};
            if (c.colTypes && (e = c.colTypes), c.columnsToUse) d.field = c.columnsToUse;
            else if (b.feed.entry.length > 0)
                for (var f in b.feed.entry[0])
                    if ("gsx" == f.substr(0, 3)) {
                        var g = f.substr(4);
                        d.field.push(g)
                    }
            var h = /^([\d\.\-]+)\%$/;
            return a.each(b.feed.entry, function(a, b) {
                var c = [];
                for (var f in d.field) {
                    var g = d.field[f],
                        i = "gsx$" + g,
                        j = b[i].$t;
                    if ("percent" == e[g] && h.test(j)) {
                        var k = h.exec(j),
                            l = parseFloat(k);
                        j = l / 100
                    }
                    c.push(j)
                }
                d.data.push(c)
            }), d
        }
    })
}(jQuery, this.recline.Backend), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    function c(a) {
        return "\n" !== a.charAt(a.length - 1) ? a : a.substring(0, a.length - 1)
    }
    b.loadFromCSVFile = function(a, c, d) {
        var e = d.encoding || "UTF-8";
        ({
            id: a.name,
            file: a
        });
        var f = new FileReader;
        f.onload = function(a) {
            var e = b.csvToDataset(a.target.result, d);
            c(e)
        }, f.onerror = function(a) {
            alert("Failed to load file. Code: " + a.target.error.code)
        }, f.readAsText(a, e)
    }, b.csvToDataset = function(a, c) {
        var d = b.parseCSV(a, c);
        fields = _.map(d[0], function(a) {
            return {
                id: a,
                label: a
            }
        });
        var e = _.map(d.slice(1), function(a) {
            var b = {};
            return _.each(d[0], function(c, d) {
                b[c] = a[d]
            }), b
        }),
            f = recline.Backend.createDataset(e, fields);
        return f
    }, b.parseCSV = function(a, b) {
        a = c(a);
        var g, h, b = b || {}, i = b.trim,
            j = b.separator || ",",
            k = b.delimiter || '"',
            l = "",
            m = !1,
            n = !1,
            o = "",
            p = [],
            q = [];
        for (h = function(a) {
            return n !== !0 && ("" === a ? a = null : i === !0 && (a = f(a)), d.test(a) ? a = parseInt(a, 10) : e.test(a) && (a = parseFloat(a, 10))), a
        }, g = 0; g < a.length; g += 1) l = a.charAt(g), m !== !1 || l !== j && "\n" !== l ? l !== k ? o += l : m ? a.charAt(g + 1) === k ? (o += k, g += 1) : m = !1 : (m = !0, n = !0) : (o = h(o), p.push(o), "\n" === l && (q.push(p), p = []), o = "", n = !1);
        return o = h(o), p.push(o), q.push(p), q
    };
    var d = /^\d+$/,
        e = /^\d*\.\d+$|^\d+\.\d*$/,
        f = function() {
            return String.prototype.trim ? function(a) {
                return a.trim()
            } : function(a) {
                return a.replace(/^\s*/, "").replace(/\s*$/, "")
            }
        }()
}(jQuery, this.recline.Backend), this.recline = this.recline || {}, this.recline.Backend = this.recline.Backend || {},
function(a, b) {
    b.createDataset = function(a, b, c) {
        c || (c = {}), c.id || (c.id = String(Math.floor(1e8 * Math.random()) + 1));
        var d = new recline.Backend.Memory,
            e = {
                documents: a,
                metadata: c
            };
        b ? e.fields = b : a && (e.fields = _.map(a[0], function(a, b) {
            return {
                id: b
            }
        })), d.addDataset(e);
        var f = new recline.Model.Dataset({
            id: c.id
        }, d);
        return f.fetch(), f
    }, b.Memory = b.Base.extend({
        __type__: "memory",
        readonly: !1,
        initialize: function() {
            this.datasets = {}
        },
        addDataset: function(b) {
            this.datasets[b.metadata.id] = a.extend(!0, {}, b)
        },
        sync: function(b, c) {
            var d = this,
                e = a.Deferred();
            if ("read" === b) {
                if ("Dataset" == c.__type__) {
                    var f = this.datasets[c.id];
                    c.set(f.metadata), c.fields.reset(f.fields), c.docCount = f.documents.length, e.resolve(c)
                }
                return e.promise()
            }
            if ("update" === b) return "Document" == c.__type__ && (_.each(d.datasets[c.dataset.id].documents, function(a, b) {
                a.id === c.id && (d.datasets[c.dataset.id].documents[b] = c.toJSON())
            }), e.resolve(c)), e.promise();
            if ("delete" === b) {
                if ("Document" == c.__type__) {
                    var f = d.datasets[c.dataset.id],
                        g = _.reject(f.documents, function(a) {
                            return a.id === c.id
                        });
                    f.documents = g, e.resolve(c)
                }
                return e.promise()
            }
            alert("Not supported: sync on Memory backend with method " + b + " and model " + c)
        },
        query: function(b, c) {
            var d = a.Deferred(),
                e = {}, f = c.size,
                g = c.from,
                h = this.datasets[b.id].documents;
            h = this._applyFilters(h, c), h = this._applyFreeTextQuery(b, h, c), _.each(c.sort, function(a) {
                var b = _.keys(a)[0];
                h = _.sortBy(h, function(c) {
                    var d = c[b];
                    return "asc" == a[b].order ? d : -1 * d
                })
            }), e.facets = this._computeFacets(h, c);
            var i = h.length;
            return resultsObj = this._docsToQueryResult(h.slice(g, g + f)), _.extend(e, resultsObj), e.total = i, d.resolve(e), d.promise()
        },
        _applyFilters: function(a, b) {
            return _.each(b.filters, function(b) {
                a = _.filter(a, function(a) {
                    var c = _.keys(b.term)[0];
                    return a[c] == b.term[c]
                })
            }), a
        },
        _applyFreeTextQuery: function(a, b, c) {
            if (c.q) {
                var d = c.q.split(" ");
                b = _.filter(b, function(b) {
                    var c = !0;
                    return _.each(d, function(d) {
                        var e = !1;
                        a.fields.each(function(a) {
                            var c = b[a.id];
                            null !== c && (c = c.toString()), e = e || c === d
                        }), c = c && e
                    }), c
                })
            }
            return b
        },
        _computeFacets: function(a, b) {
            var c = {};
            return b.facets ? (_.each(b.facets, function(a, b) {
                c[b] = new recline.Model.Facet({
                    id: b
                }).toJSON(), c[b].termsall = {}
            }), _.each(a, function(a) {
                _.each(b.facets, function(b, d) {
                    var e = b.terms.field,
                        f = a[e],
                        g = c[d];
                    f ? g.termsall[f] = g.termsall[f] ? g.termsall[f] + 1 : 1 : g.missing = g.missing + 1
                })
            }), _.each(b.facets, function(a, b) {
                var d = c[b],
                    e = _.map(d.termsall, function(a, b) {
                        return {
                            term: b,
                            count: a
                        }
                    });
                d.terms = _.sortBy(e, function(a) {
                    return -a.count
                }), d.terms = d.terms.slice(0, 10)
            }), c) : facetsResults
        }
    })
}(jQuery, this.recline.Backend), recline.View.Map.prototype._setupMap = function() {}, CKAN.Dgu.resourcePreviewer = function(a, b) {
    return b.$dialog = function() {
        return a("#ckanext-datapreview")
    }, b.makeEmbedLink = function(b) {
        var c = b.toJSON();
        c.state_version = 1;
        var d = "?",
            e = [];
        return a.each(c, function(a, b) {
            "object" == typeof b && (b = JSON.stringify(b)), e.push(a + "=" + escape(b))
        }), d += e.join("&"), embedPath + d
    }, b.loadPreviewDialog = function(c) {
        function d(c) {
            function d() {
                var c = b.makeEmbedLink(f.state),
                    d = i.val(),
                    e = j.val();
                c += "&width=" + d + "&height=" + e, h.val(a.mustache('<iframe frameBorder="0" width="{{width}}" height="{{height}}" src="{{link}}"></iframe>', {
                    link: c.replace(/"/g, "&quot;"),
                    width: d,
                    height: e
                })), g.attr("href", c)
            }
            var e = [{
                id: "grid",
                label: "Grid",
                view: new recline.View.Grid({
                    model: c
                })
            }, {
                id: "graph",
                label: "Graph",
                view: new recline.View.Graph({
                    model: c
                })
            }, {
                id: "map",
                label: "Map",
                view: new recline.View.Map({
                    model: c
                })
            }],
                f = new recline.View.DataExplorer({
                    el: b.$dialog(),
                    model: c,
                    views: e,
                    config: {
                        readOnly: !0
                    }
                });
            f.model.bind("query:fail", function() {
                a("#ckanext-datapreview .data-view-container").hide(), a("#ckanext-datapreview .header").hide(), a(".preview-header .btn").hide()
            });
            var g = a(".embedLink"),
                h = a(".embedIframeText"),
                i = a(".iframe-width"),
                j = a(".iframe-height");
            f.state.bind("change", d);
            for (var k = 0; k < f.pageViews.length; k++) f.pageViews[k].view.state.bind("change", d);
            i.change(d), j.change(d), d(), a(".preview-header .btn").show(), Backbone.history.start()
        }
        if (b.$dialog().html('<h4>Loading ... <img src="http://assets.okfn.org/images/icons/ajaxload-circle.gif" class="loading-spinner" /></h4>'), c.formatNormalized = b.normalizeFormat(c.format), c.url = b.normalizeUrl(c.url), "" == c.formatNormalized) {
            var e = c.url.split("/");
            e = e[e.length - 1], e = e.split("?"), e = e[0];
            var f = e.split(".");
            f.length > 1 && (c.formatNormalized = f[f.length - 1])
        }
        if (c.webstore_url) {
            c.elasticsearch_url = "/api/data/" + c.id;
            var g = new recline.Model.Dataset(c, "elasticsearch");
            d(g)
        } else if (c.formatNormalized in {
            csv: "",
            xls: "",
            tsv: "",
            ods: ""
        }) {
            c.format = c.formatNormalized;
            var g = new recline.Model.Dataset(c, "dataproxy");
            d(g), a(".recline-query-editor .text-query").hide()
        } else if (c.formatNormalized in {
            n3: "",
            "n-triples": "",
            turtle: "",
            plain: "",
            txt: ""
        }) {
            var h = "/data/preview/" + c.id + "?type=plain";
            b.getResourceDataDirect(h, function(a) {
                b.showPlainTextData(a)
            })
        } else if (c.formatNormalized in {
            html: "",
            htm: ""
        } || "http://docs.google.com/" == c.url.substring(0, 23)) {
            b.$dialog().empty();
            var i = a("<iframe></iframe>");
            i.attr("src", c.url), i.attr("width", "100%"), i.attr("height", "100%"), a("#ckanext-html-preview").append(i)
        } else if (c.formatNormalized in {
            png: "",
            jpg: "",
            gif: ""
        } || "image" == c.resource_type) {
            b.$dialog().empty();
            var i = a("<img />");
            i.attr("src", c.url), i.css("max-width", "100%"), i.css("border", "solid 4px black"), b.$dialog().append(i)
        } else b.showError({
            title: "Pregled nije moguć za format podataka: " + c.formatNormalized,
            message: ""
        })
    }, b.getResourceDataDirect = function(b, c) {
        var d = 3e4,
            e = setTimeout(function() {
                c({
                    error: {
                        title: "Request Error",
                        message: "Dataproxy server did not respond after " + d / 1e3 + " seconds"
                    }
                })
            }, d);
        a.ajax({
            url: b,
            cache: !0,
            dataType: "json",
            success: function(a) {
                clearTimeout(e), c(a)
            },
            error: function() {
                clearTimeout(e), c({
                    error: {
                        title: "Request Error",
                        message: "There was an error processing the request"
                    }
                })
            }
        })
    }, b.showPlainTextData = function(c) {
        if (c.error) b.showError(c.error);
        else {
            for (var d = a("<pre></pre>"), e = 0; e < c.data.length; e++) {
                var f = c.data[e].join(",") + "\n";
                d.append(b.escapeHTML(f))
            }
            b.$dialog().html(d)
        }
    }, b.showError = function(a) {
        var c = _.template('<div class="panel panel-danger"><div class="panel-heading"><strong><%= title %></strong></div><div class="panel-body"><%= message %></div></div>', a);
        b.$dialog().html(c)
    }, b.normalizeFormat = function(a) {
        var b = a.toLowerCase();
        return b = b.split("/"), b = b[b.length - 1]
    }, b.normalizeUrl = function(a) {
        return 0 === a.indexOf("https") ? "http" + a.slice(5) : a
    }, b.escapeHTML = function(a) {
        return a.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27").replace(/\//g, "&#x2F;")
    }, b
}(jQuery, CKAN.Dgu.resourcePreviewer || {});
